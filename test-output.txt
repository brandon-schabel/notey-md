bun test v1.2.2 (c1708ea6)

markdown-parser.test.ts:
17 | 
18 | describe("Edge Case Tests for parseMarkdown", () => {
19 |     test("Escapes HTML special characters and wraps in paragraph", () => {
20 |         const input = "a & b < c > d";
21 |         const expected = "<p>a &amp; b &lt; c &gt; d</p>";
22 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p>a &amp; b &lt; c &gt; d</p>"
Received: "<p>a &amp; b < c > d</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:22:38)
(fail) Edge Case Tests for parseMarkdown > Escapes HTML special characters and wraps in paragraph [0.82ms]
23 |     });
24 | 
25 |     test("Converts code blocks", () => {
26 |         const input = "```console.log('hello');```";
27 |         const expected = "<p><pre><code>console.log('hello');</code></pre></p>";
28 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p><pre><code>console.log('hello');</code></pre></p>"
Received: "<pre><code></code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:28:38)
(fail) Edge Case Tests for parseMarkdown > Converts code blocks
(pass) Edge Case Tests for parseMarkdown > Converts inline code
(pass) Edge Case Tests for parseMarkdown > Converts bold text [0.30ms]
(pass) Edge Case Tests for parseMarkdown > Converts italic text
47 |     });
48 | 
49 |     test("Converts math display checkbox with lowercase x", () => {
50 |         const input = "- $begin:math:display$ x $end:math:display$ Math content";
51 |         const expected = "<p><ul><li><label><input type=\"checkbox\" checked disabled> Math content</label></li></ul></p>";
52 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p><ul><li><label><input type=\"checkbox\" checked disabled> Math content</label></li></ul></p>"
Received: "<ul>\n<li><p>$begin:math:display$ x $end:math:display$ Math content</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:52:38)
(fail) Edge Case Tests for parseMarkdown > Converts math display checkbox with lowercase x [0.23ms]
53 |     });
54 | 
55 |     test("Converts math display checkbox with uppercase X", () => {
56 |         const input = "* $begin:math:display$ X $end:math:display$ Another math";
57 |         const expected = "<p><ul><li><label><input type=\"checkbox\" checked disabled> Another math</label></li></ul></p>";
58 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p><ul><li><label><input type=\"checkbox\" checked disabled> Another math</label></li></ul></p>"
Received: "<ul>\n<li><p>$begin:math:display$ X $end:math:display$ Another math</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:58:38)
(fail) Edge Case Tests for parseMarkdown > Converts math display checkbox with uppercase X [0.11ms]
59 |     });
60 | 
61 |     test("Converts bullet lists", () => {
62 |         const input = "- Item one\n- Item two";
63 |         const expected = "<p><ul><li>Item one</li></ul>\n<ul><li>Item two</li></ul></p>";
64 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p><ul><li>Item one</li></ul>\n<ul><li>Item two</li></ul></p>"
Received: "<ul>\n<li><p>Item one</p></li><li><p>Item two</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:64:38)
(fail) Edge Case Tests for parseMarkdown > Converts bullet lists [0.08ms]
66 | 
67 |     test("Converts headers", () => {
68 |         const input = "# Header1\n## Header2\n### Header3\n#### Header4\n##### Header5\n###### Header6";
69 |         const expected =
70 |             "<p><h1>Header1</h1>\n<h2>Header2</h2>\n<h3>Header3</h3>\n<h4>Header4</h4>\n<h5>Header5</h5>\n<h6>Header6</h6></p>";
71 |         expect(parseMarkdown(input)).toBe(expected);
                                          ^
error: expect(received).toBe(expected)

Expected: "<p><h1>Header1</h1>\n<h2>Header2</h2>\n<h3>Header3</h3>\n<h4>Header4</h4>\n<h5>Header5</h5>\n<h6>Header6</h6></p>"
Received: "<h1>Header1</h1>\n<h2>Header2</h2>\n<h3>Header3</h3>\n<h4>Header4</h4>\n<h5>Header5</h5>\n<h6>Header6</h6>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:71:38)
(fail) Edge Case Tests for parseMarkdown > Converts headers [0.14ms]
(pass) Edge Case Tests for createLineDiv > Creates an active line div with contentEditable true [0.84ms]
(pass) Edge Case Tests for createLineDiv > Creates an inactive line div with parsed markdown [1.11ms]
(pass) Edge Case Tests for updateLine > Updates the line content in state
106 | });
107 | 
108 | 
109 | test("Blurring from a line sets active line to null", () => {
110 |     const editor = document.getElementById("hybridEditor")!;
111 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:111:17)
(fail) Blurring from a line sets active line to null
120 |     });
121 | });
122 | 
123 | test("applyFormatToActiveLine bolds the active line", () => {
124 |     const editor = document.getElementById("hybridEditor")!;
125 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:125:17)
(fail) applyFormatToActiveLine bolds the active line
131 |     expect(line1.textContent).toBe("**Initial line 1**");
132 | });
133 | 
134 | test("insertLinkAtActiveLine adds a link to the active line", () => {
135 |     const editor = document.getElementById("hybridEditor")!;
136 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:136:17)
(fail) insertLinkAtActiveLine adds a link to the active line
142 |     expect(line1.textContent).toBe("Initial line 1[Link Text](http://example.com)");
143 | });
144 | 
145 | test("insertListItemAtActiveLine adds a list item to the active line", () => {
146 |     const editor = document.getElementById("hybridEditor")!;
147 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:147:17)
(fail) insertListItemAtActiveLine adds a list item to the active line
169 |     Object.defineProperty(navigator, "clipboard", {
170 |         value: clipboardMock,
171 |         writable: true,
172 |     });
173 | 
174 |     copyButton.click();
          ^
TypeError: null is not an object (evaluating 'copyButton.click')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:174:5)
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:156:45)
(fail) Clicking copy button copies content
179 | 
180 | test("Clicking save button calls fetch", async () => {
181 |     const saveButton = document.getElementById("saveBtn") as HTMLButtonElement;
182 |     const mockFetch = mock(() => Promise.resolve(new Response()));
183 |     global.fetch = mockFetch;
184 |     saveButton.click();
          ^
TypeError: null is not an object (evaluating 'saveButton.click')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:184:5)
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:180:42)
(fail) Clicking save button calls fetch
186 |     expect(mockFetch.mock.calls.length).toBeGreaterThan(0);
187 | });
188 | 
189 | test("applyFormatToActiveLine correctly inserts checkbox", () => {
190 |     const editor = document.getElementById("hybridEditor")!;
191 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:191:17)
(fail) applyFormatToActiveLine correctly inserts checkbox
197 |     expect(line1.textContent).toBe("- [ ] Initial line 1");
198 | });
199 | 
200 | test("applyFormatToActiveLine correctly inserts code block", () => {
201 |     const editor = document.getElementById("hybridEditor")!;
202 |     let line1 = editor.querySelector("[data-line-index='0']") as HTMLElement;
                      ^
TypeError: null is not an object (evaluating 'editor.querySelector')
      at <anonymous> (/Users/brandon/Programming/notey-notey/markdown-parser.test.ts:202:17)
(fail) applyFormatToActiveLine correctly inserts code block

editor.test.ts:
(pass) Edge Case Tests for createLineDiv > Creates an active line div with contentEditable true
(pass) Edge Case Tests for createLineDiv > Creates an inactive line div with parsed markdown [0.75ms]
(pass) Edge Case Tests for updateLine > Updates the line content in state
(pass) Edge Case Tests for scheduleSave > Does not schedule save when already saving
(pass) Edge Case Tests for scheduleSave > Schedules save and calls onSave after delay
(pass) Edge Case Tests for applyFormatToActiveLine > Does nothing when activeLine is null
(pass) Edge Case Tests for applyFormatToActiveLine > Wraps active line with triple backticks for code block
(pass) Edge Case Tests for applyFormatToActiveLine > Prefixes active line with checkbox format
(pass) Edge Case Tests for applyFormatToActiveLine > Wraps active line with arbitrary format
(pass) Edge Case Tests for insertLinkAtActiveLine > Does nothing when activeLine is null
(pass) Edge Case Tests for insertLinkAtActiveLine > Appends link text to active line
(pass) Edge Case Tests for insertListItemAtActiveLine > Does nothing when activeLine is null
(pass) Edge Case Tests for insertListItemAtActiveLine > Appends list item text to active line [0.43ms]
(pass) Edge Case Tests for handleEditorClick > Does nothing if clicked element is not within a line [0.61ms]
(pass) Edge Case Tests for handleEditorClick > Sets activeLine when a valid line is clicked [0.28ms]
(pass) Edge Case Tests for handleEditorInput > Does nothing if event target lacks dataset lineIndex [0.16ms]
(pass) Edge Case Tests for handleEditorInput > Updates line content when input event occurs on active line [0.32ms]
(pass) Edge Case Tests for handleEditorKeyDown > Does nothing if activeLine is null [0.12ms]
(pass) Edge Case Tests for handleEditorKeyDown > ArrowUp decreases activeLine if not at first line [0.94ms]
(pass) Edge Case Tests for handleEditorKeyDown > ArrowUp does not decrease activeLine if already at first line [0.04ms]
(pass) Edge Case Tests for handleEditorKeyDown > ArrowDown increases activeLine if not at last line [0.25ms]
(pass) Edge Case Tests for handleEditorKeyDown > ArrowDown does not increase activeLine if already at last line [0.04ms]
(pass) Edge Case Tests for debounce > Calls function only once after rapid invocations [61.41ms]
(pass) Edge Case Tests for createEditorResponse > Returns valid HTML response with correct headers [1.11ms]
(pass) Edge Case Tests for handleEditorRoute > Returns editor response when file read is successful [1.23ms]
(pass) Edge Case Tests for handleEditorRoute > Returns editor response with empty content when file read fails [0.18ms]
(pass) Edge Case Tests for handleEditorRequest > Returns editor response for /editor/ route [1.08ms]
(pass) Edge Case Tests for handleEditorRequest > Returns 404 for non-editor route [0.07ms]
(pass) Editor Functionality > Clicking a line sets it as active [1.65ms]
(pass) Editor Functionality > Clicking a different line changes active line [0.84ms]
(pass) Editor Functionality > Editing an active line updates the content [0.47ms]
(pass) Editor Functionality > Blurring from a line sets active line to null [0.65ms]
(pass) Editor Functionality > applyFormatToActiveLine bolds the active line [0.42ms]
(pass) Editor Functionality > insertLinkAtActiveLine adds a link to the active line [0.72ms]
(pass) Editor Functionality > insertListItemAtActiveLine adds a list item to the active line [0.31ms]
(pass) Editor Functionality > Clicking copy button copies content
(pass) Editor Functionality > Clicking save button calls fetch [11.90ms]
(pass) Editor Functionality > applyFormatToActiveLine correctly inserts checkbox [1.14ms]
(pass) Editor Functionality > applyFormatToActiveLine correctly inserts code block [0.62ms]
(pass) Editor Initialization Edge Cases > initEditor with empty content should not crash [0.27ms]

index.test.ts:
Search index built. 2 files indexed.
(pass) File System Setup and Teardown > Test workspace is writable [1.01ms]
(pass) Markdown Parsing Edge Cases > Multiple consecutive blank lines do not create extra nodes [0.12ms]
(pass) Markdown Parsing Edge Cases > Heading with no space after hash is treated as paragraph
(pass) Markdown Parsing Edge Cases > Inline parse ignores special characters that are incomplete
(pass) Markdown Parsing Edge Cases > Mixed code blocks with inconsistent indentation [0.34ms]
(pass) Markdown Parsing Edge Cases > Multiple code blocks in one file [0.03ms]
(pass) Additional Markdown Rendering Checks > Nested bold and italic are rendered correctly
(pass) Additional Markdown Rendering Checks > Ampersand, angle brackets, and quotes are escaped in paragraph
(pass) File System Additional Edge Cases > Reading and writing unusual characters is lossless [0.42ms]
(pass) File System Additional Edge Cases > writeNoteToDiskSync and readNoteFromDiskSync with emojis [0.10ms]
(pass) Search Index Additional Cases > Case-insensitive search matches various capitalizations [0.26ms]
(pass) Search Index Additional Cases > Multiple tokens in query with no intersection => empty result
(pass) Search Index Additional Cases > Extra spaces in query are ignored [0.08ms]
(pass) Plugin System Additional Tests > Multiple plugins can be registered, hooks run in order [0.06ms]
(pass) Plugin System Additional Tests > Plugin throwing error in onNoteLoad does not break subsequent plugins [0.02ms]
(pass) Editor and HTML Rendering > renderEditorPage inserts the correct placeholders
(pass) Editor and HTML Rendering > escapeHtml ensures all critical characters are escaped
(pass) Editor and HTML Rendering > renderEditorPage throws if editor.html is missing (mocking readFileSync)
(pass) Concurrent File Operations > Simultaneous reads and writes do not corrupt file [0.59ms]
(pass) Boundary and Error Handling > Function parseMarkdown handles extremely large input gracefully
(pass) Boundary and Error Handling > ensureSafePath with absolute path pointing inside vault is allowed
(pass) Boundary and Error Handling > searchNotes returns empty array if token not found
(pass) Snippet Building Additional Cases > Snippet is truncated properly for long lines [0.37ms]
(pass) Snippet Building Additional Cases > Snippet falls back to first line if token not found [0.14ms]
(pass) Plugin Handling and Logging > Multiple onNoteSave hooks are invoked sequentially [0.02ms]

md-parser-test-suits/editor-reference-file-2.test.ts:
(pass) editor-reference-file-2 tests > Should parse the top-level heading correctly [0.41ms]
(pass) editor-reference-file-2 tests > Should parse sub-headings (e.g., '## 1. Headings') correctly
(pass) editor-reference-file-2 tests > Should parse various heading levels
(pass) editor-reference-file-2 tests > Should parse paragraphs correctly
46 |   test("Should parse emphasis correctly", () => {
47 |     expect(parseMarkdown("*Italic text using asterisks*")).toContain("<em>Italic text using asterisks</em>");
48 |     expect(parseMarkdown("_Italic text using underscores_")).toContain("<em>Italic text using underscores</em>");
49 |     expect(parseMarkdown("**Bold text using asterisks**")).toContain("<strong>Bold text using asterisks</strong>");
50 |     expect(parseMarkdown("__Bold text using underscores__")).toContain("<strong>Bold text using underscores</strong>");
51 |     expect(parseMarkdown("***Bold and italic text using asterisks***")).toContain("<em><strong>Bold and italic text using asterisks</strong></em>");
                                                                             ^
error: expect(received).toContain(expected)

Expected to contain: "<em><strong>Bold and italic text using asterisks</strong></em>"
Received: "<p><strong>*Bold and italic text using asterisks</strong>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:51:73)
(fail) editor-reference-file-2 tests > Should parse emphasis correctly
(pass) editor-reference-file-2 tests > Should parse blockquotes correctly
65 |   });
66 | 
67 |   test("Should parse unordered lists correctly", () => {
68 |     const unorderedListText = "- Item 1\n- Item 2\n  - Nested Item 2.1\n  - Nested Item 2.2\n- Item 3";
69 |     const output = parseMarkdown(unorderedListText);
70 |     expect(output).toContain("<li>Item 1</li>");
                        ^
error: expect(received).toContain(expected)

Expected to contain: "<li>Item 1</li>"
Received: "<ul>\n<li><p>Item 1</p></li><li><p>Item 2</p></li><li><p>Nested Item 2.1</p></li><li><p>Nested Item 2.2</p></li><li><p>Item 3</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:70:20)
(fail) editor-reference-file-2 tests > Should parse unordered lists correctly
75 |   });
76 | 
77 |   test("Should parse ordered lists correctly", () => {
78 |     const orderedListText = "1. First item\n2. Second item\n   1. Nested ordered item 2.1\n   2. Nested ordered item 2.2\n3. Third item";
79 |     const output = parseMarkdown(orderedListText);
80 |     expect(output).toContain("<li>First item</li>");
                        ^
error: expect(received).toContain(expected)

Expected to contain: "<li>First item</li>"
Received: "<ol>\n<li><p>First item</p></li><li><p>Second item</p></li><li><p>Nested ordered item 2.1</p></li><li><p>Nested ordered item 2.2</p></li><li><p>Third item</p></li>\n</ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:80:20)
(fail) editor-reference-file-2 tests > Should parse ordered lists correctly
86 | 
87 |   test("Should parse task lists correctly", () => {
88 |     const taskListText = "- [x] Completed task\n- [ ] Incomplete task\n- [ ] Another incomplete task";
89 |     const output = parseMarkdown(taskListText);
90 |     // Check that the checkboxes were parsed.  The current impl. *always* makes them disabled.
91 |     expect(output).toContain('<input type="checkbox" checked disabled>');
                        ^
error: expect(received).toContain(expected)

Expected to contain: "<input type=\"checkbox\" checked disabled>"
Received: "<ul>\n<li><p>[x] Completed task</p></li><li><p>[ ] Incomplete task</p></li><li><p>[ ] Another incomplete task</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:91:20)
(fail) editor-reference-file-2 tests > Should parse task lists correctly
94 | 
95 | 
96 |   test("Should parse inline code correctly", () => {
97 |     const inlineCodeText = "This is an example of inline code: `console.log(\"Hello, world!\")`.";
98 |     const output = parseMarkdown(inlineCodeText);
99 |     expect(output).toContain('<code class="inline">console.log("Hello, world!")</code>');
                        ^
error: expect(received).toContain(expected)

Expected to contain: "<code class=\"inline\">console.log(\"Hello, world!\")</code>"
Received: "<p>This is an example of inline code: <code class=\"inline\">console.log(&quot;Hello, world!&quot;)</code>.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:99:20)
(fail) editor-reference-file-2 tests > Should parse inline code correctly
100 |   });
101 | 
102 |   test("Should parse fenced code blocks correctly", () => {
103 |     const codeBlockText = "```javascript\nfunction greet(name) {\n    console.log(`Hello, ${name}!`);\n}\ngreet(\"Markdown\");\n```";
104 |     const output = parseMarkdown(codeBlockText);
105 |     expect(output).toContain("<pre><code>function greet(name) {\n    console.log(`Hello, ${name}!`);\n}\ngreet(&quot;Markdown&quot;);\n</code></pre>");
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<pre><code>function greet(name) {\n    console.log(`Hello, ${name}!`);\n}\ngreet(&quot;Markdown&quot;);\n</code></pre>"
Received: "<pre><code>function greet(name) {\n    console.log(`Hello, ${name}!`);\n}\ngreet(&quot;Markdown&quot;);</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:105:20)
(fail) editor-reference-file-2 tests > Should parse fenced code blocks correctly [1.09ms]
(pass) editor-reference-file-2 tests > Should parse indented code blocks correctly
(pass) editor-reference-file-2 tests > Should parse horizontal rules correctly
118 |   });
119 | 
120 |   test("Should parse inline links correctly", () => {
121 |     const inlineLinkText = "[Markdown Guide](https://www.markdownguide.org/)";
122 |     const output = parseMarkdown(inlineLinkText);
123 |     expect(output).toContain('<a href="https://www.markdownguide.org/">Markdown Guide</a>');
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<a href=\"https://www.markdownguide.org/\">Markdown Guide</a>"
Received: "<p>[Markdown Guide](https://www.markdownguide.org/)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:123:20)
(fail) editor-reference-file-2 tests > Should parse inline links correctly
124 |   });
125 | 
126 |   test("Should parse links with titles correctly", () => {
127 |     const linkWithTitleText = '[GitHub](https://github.com "GitHub Homepage")';
128 |     const output = parseMarkdown(linkWithTitleText);
129 |     expect(output).toContain('<a href="https://github.com" title="GitHub Homepage">GitHub</a>');
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<a href=\"https://github.com\" title=\"GitHub Homepage\">GitHub</a>"
Received: "<p>[GitHub](https://github.com &quot;GitHub Homepage&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:129:20)
(fail) editor-reference-file-2 tests > Should parse links with titles correctly
130 |   });
131 | 
132 |   test("Should parse automatic links correctly", () => {
133 |     const automaticLinkText = "<https://www.example.com>";
134 |     const output = parseMarkdown(automaticLinkText);
135 |     expect(output).toContain('<a href="https://www.example.com">https://www.example.com</a>');
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<a href=\"https://www.example.com\">https://www.example.com</a>"
Received: "<https://www.example.com>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:135:20)
(fail) editor-reference-file-2 tests > Should parse automatic links correctly
136 |   });
137 | 
138 |   test("Should parse inline images correctly", () => {
139 |     const inlineImageText = "![Alt text for image](https://via.placeholder.com/150 \"Optional title\")";
140 |     const output = parseMarkdown(inlineImageText);
141 |     expect(output).toContain('<img src="https://via.placeholder.com/150" alt="Alt text for image" title="Optional title">');
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<img src=\"https://via.placeholder.com/150\" alt=\"Alt text for image\" title=\"Optional title\">"
Received: "<p>![Alt text for image](https://via.placeholder.com/150 &quot;Optional title&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:141:20)
(fail) editor-reference-file-2 tests > Should parse inline images correctly
(pass) editor-reference-file-2 tests > Should parse reference-style images correctly
(pass) editor-reference-file-2 tests > Should parse tables correctly [0.37ms]
(pass) editor-reference-file-2 tests > Should parse footnotes correctly
(pass) editor-reference-file-2 tests > Should parse strikethrough correctly
(pass) editor-reference-file-2 tests > Should parse definition lists correctly
(pass) editor-reference-file-2 tests > Should parse inline HTML correctly
(pass) editor-reference-file-2 tests > Should handle inline JavaScript (should be escaped) [0.01ms]
(pass) editor-reference-file-2 tests > Should parse emoji correctly
(pass) editor-reference-file-2 tests > Should escape special characters correctly
(pass) editor-reference-file-2 tests > Should parse inline math (LaTeX) correctly
223 |   });
224 | 
225 |   test("Should parse display math (LaTeX) correctly", () => {
226 |     const displayMathText = "$$\n\\int_{a}^{b} f(x)\\,dx = F(b) - F(a)\n$$";
227 |     const output = parseMarkdown(displayMathText);
228 |     expect(output).toContain("$$\n\\int_{a}^{b} f(x)\\,dx = F(b) - F(a)\n$$"); // Expect direct passthrough
                         ^
error: expect(received).toContain(expected)

Expected to contain: "$$\n\\int_{a}^{b} f(x)\\,dx = F(b) - F(a)\n$$"
Received: "<p>$$ \\int_{a}^{b} f(x)\\,dx = F(b) - F(a) $$</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:228:20)
(fail) editor-reference-file-2 tests > Should parse display math (LaTeX) correctly
235 |     expect(output).toContain("<details>"); // Expect direct passthrough
236 |     expect(output).toContain("<summary>Click to expand hidden content</summary>");
237 |     expect(output).toContain("This section is hidden by default.");
238 |     expect(output).toContain("Hidden list item 1"); // Expect direct passthrough
239 |     expect(output).toContain("Hidden list item 2");
240 |     expect(output).toContain("print(\"Hello from details!\")");  // Expect direct passthrough
                         ^
error: expect(received).toContain(expected)

Expected to contain: "print(\"Hello from details!\")"
Received: "<details>\n  <summary>Click to expand hidden content</summary>\n<p>  This section is hidden by default. It can include multiple paragraphs, lists, and even code blocks.</p>\n<ul>\n<li><p>Hidden list item 1</p></li><li><p>Hidden list item 2</p></li>\n</ul>\n<pre><code>  # This code is inside the details element\n  print(&quot;Hello from details!&quot;)</code></pre>\n</details>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:240:20)
(fail) editor-reference-file-2 tests > Should parse details and summary correctly [0.19ms]
(pass) editor-reference-file-2 tests > Should parse miscellaneous notes correctly
248 |   });
249 | 
250 |   test("Should parse links to external references correctly", () => {
251 |     const referenceLinkText = "For further reference, check out the [CommonMark Spec](https://spec.commonmark.org/).";
252 |     const output = parseMarkdown(referenceLinkText);
253 |     expect(output).toContain('<a href="https://spec.commonmark.org/">CommonMark Spec</a>');
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<a href=\"https://spec.commonmark.org/\">CommonMark Spec</a>"
Received: "<p>For further reference, check out the [CommonMark Spec](https://spec.commonmark.org/).</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:253:20)
(fail) editor-reference-file-2 tests > Should parse links to external references correctly
(pass) editor-reference-file-2 tests > Should parse the 'End of Document' marker correctly
261 | 
262 |   test("Should parse the entire editor-reference-file-2.md without errors", () => {
263 |     const output = parseMarkdown(entireMarkdown);
264 | 
265 |     // General content checks
266 |     expect(output).toContain("<h1>Comprehensive Markdown Document for Testing</h1>");
                         ^
error: expect(received).toContain(expected)

Expected to contain: "<h1>Comprehensive Markdown Document for Testing</h1>"
Received: "<pre><code># Comprehensive Markdown Document for Testing\n\nThis document contains a wide range of Markdown features to help validate your Markdown to HTML parser.\n\n---\n\n## 1. Headings\n\n# Heading Level 1\n## Heading Level 2\n### Heading Level 3\n#### Heading Level 4\n##### Heading Level 5\n###### Heading Level 6\n\n---\n\n## 2. Paragraphs\n\nThis is a simple paragraph with some text. Markdown supports multiple paragraphs separated by blank lines.\n\nHere is another paragraph to illustrate spacing.\n\n---\n\n## 3. Emphasis\n\n*Italic text using asterisks*  \n_Italic text using underscores_\n\n**Bold text using asterisks**  \n__Bold text using underscores__\n\n***Bold and italic text using asterisks***  \n___Bold and italic text using underscores___\n\n---\n\n## 4. Blockquotes\n\n&gt; This is a blockquote.\n&gt;\n&gt; It can span multiple paragraphs and include other Markdown elements such as lists:\n&gt; - List item one\n&gt; - List item two\n\nNested blockquote:\n&gt; &gt; This is a nested blockquote level 2.\n&gt; &gt;\n&gt; &gt; &gt; This is nested blockquote level 3.\n\n---\n\n## 5. Lists\n\n### 5.1. Unordered Lists\n\n- Item 1\n- Item 2\n  - Nested Item 2.1\n  - Nested Item 2.2\n- Item 3\n\n### 5.2. Ordered Lists\n\n1. First item\n2. Second item\n   1. Nested ordered item 2.1\n   2. Nested ordered item 2.2\n3. Third item\n\n### 5.3. Task Lists (GitHub Flavored Markdown)\n\n- [x] Completed task\n- [ ] Incomplete task\n- [ ] Another incomplete task\n\n---\n\n## 6. Code\n\n### 6.1. Inline Code\n\nThis is an example of inline code: `console.log(&quot;Hello, world!&quot;)`.\n\n### 6.2. Code Blocks\n\nFenced code block with a language specifier:\n</code></pre>\n<p>function greet(name) {</p>\n<pre><code>console.log(`Hello, ${name}!`);</code></pre>\n<p>} greet(&quot;Markdown&quot;);</p>\n<pre><code>\nIndented code block:\n\n    def greet(name):\n        print(&quot;Hello, &quot; + name)\n    greet(&quot;Markdown&quot;)\n\n---\n\n## 7. Horizontal Rules\n\nUsing dashes:\n\n---\n\nUsing underscores:\n\n___\n\nUsing asterisks:\n\n***\n\n---\n\n## 8. Links\n\nInline link: [Markdown Guide](https://www.markdownguide.org/)\n\nLink with title: [GitHub](https://github.com &quot;GitHub Homepage&quot;)\n\nAutomatic link: &lt;https://www.example.com&gt;\n\n---\n\n## 9. Images\n\nInline image:\n\n![Alt text for image](https://via.placeholder.com/150 &quot;Optional title&quot;)\n\nReference-style image:\n\n![Reference Image][image-ref]\n\n[image-ref]: https://via.placeholder.com/200 &quot;Reference Image Title&quot;\n\n---\n\n## 10. Tables\n\n| Header 1 | Header 2 | Header 3 |\n|----------|:--------:|---------:|\n| Left     | Center   | Right    |\n| Data 1   | Data 2   | Data 3   |\n| Data 4   | Data 5   | Data 6   |\n\n---\n\n## 11. Footnotes\n\nHere is a statement with a footnote.[^1]\n\nAnother reference to a longer footnote.[^longnote]\n\n[^1]: This is a simple footnote.\n\n[^longnote]: This is a footnote with multiple lines.\n    You can continue the explanation here.\n\n---\n\n## 12. Strikethrough (GitHub Flavored Markdown)\n\nThis is ~~strikethrough~~ text.\n\n---\n\n## 13. Definition Lists (if supported)\n\nTerm 1  \n: Definition for term 1\n\nTerm 2  \n: Definition for term 2\n\n---\n\n## 14. Inline HTML\n\n&lt;div style=&quot;color: red; padding: 10px; border: 1px solid #ccc;&quot;&gt;\n  This is inline HTML content.\n&lt;/div&gt;\n\n&lt;script&gt;\n  // Inline JavaScript for testing purposes\n  console.log('Hello from inline HTML!');\n&lt;/script&gt;\n\n---\n\n## 15. Emoji\n\nI :heart: Markdown! :smile:\n\n---\n\n## 16. Escaping Characters\n\nEscape special characters using a backslash: \\*this is not italic\\* and \\# not a heading.\n\n---\n\n## 17. Math (LaTeX)\n\nInline math: $E = mc^2$\n\nDisplay math:\n\n$$\n\\int_{a}^{b} f(x)\\,dx = F(b) - F(a)\n$$\n\n---\n\n## 18. Details and Summary\n\n&lt;details&gt;\n  &lt;summary&gt;Click to expand hidden content&lt;/summary&gt;\n  \n  This section is hidden by default. It can include multiple paragraphs, lists, and even code blocks.\n  \n- Hidden list item 1\n- Hidden list item 2\n  </code></pre>\n<h1>This code is inside the details element</h1>\n<p>  print(&quot;Hello from details!&quot;)</p>\n<pre><code>  \n&lt;/details&gt;\n\n---\n\n## 19. Miscellaneous\n\n&gt; **Note:** This document is designed to test a wide range of Markdown features, including some that may only be supported in extended Markdown implementations.\n\nFor further reference, check out the [CommonMark Spec](https://spec.commonmark.org/).\n\n_End of Document._\n</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-2.test.ts:266:20)
(fail) editor-reference-file-2 tests > Should parse the entire editor-reference-file-2.md without errors [0.23ms]

md-parser-test-suits/common-mark-0-31-2-spec.test.ts:
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>foo baz bim </code></pre>"
Received: "<pre><code>foo baz bim</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 1 [0.94ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>foo baz bim </code></pre>"
Received: "<p> foo baz bim</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 2
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>a a ὐ a </code></pre>"
Received: "<pre><code>a a ὐ a</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 3
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <p>bar</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <pre><code>bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 4
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <pre><code> bar </code></pre> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <pre><code> bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 5
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <pre><code> foo </code></pre> </blockquote>"
Received: "<blockquote> <pre><code>foo</code></pre> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 6
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <pre><code> foo </code></pre> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 7
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>foo bar </code></pre>"
Received: "<pre><code>foo bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 8
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo <ul> <li>bar <ul> <li>baz</li> </ul> </li> </ul> </li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 9 [0.46ms]
(pass) CommonMark Spec Test Suite > Tabs > Example 10
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<ul> <li><p><em> </em> </p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Tabs > Example 11
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\\]^_`{|}~</p>"
Received: "<p>!\\&quot;#\\$\\%\\&amp;\\'()*+\\,-.\\/\\:\\;\\<\\=\\>\\?\\@[\\]\\^_`{\\|}\\~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 12
(pass) CommonMark Spec Test Suite > Backslash escapes > Example 13
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*not emphasized* &lt;br/&gt; not a tag [not a link](/foo) `not code` 1. not a list * not a list # not a heading [foo]: /url &quot;not a reference&quot; &amp;ouml; not a character entity</p>"
Received: "<p>*not emphasized<em> \\<br/> not a tag [not a link](/foo) `not code` 1. not a list \\</em> not a list # not a heading [foo]: /url &quot;not a reference&quot; \\&amp;ouml; not a character entity</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 14
(pass) CommonMark Spec Test Suite > Backslash escapes > Example 15
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> bar</p>"
Received: "<p>foo\\ bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 16
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>\\[\\`</code></p>"
Received: "<p><code class=\"inline\"></code> [` <code class=\"inline\"></code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 17 [0.32ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>\\[\\] </code></pre>"
Received: "<pre><code>\\[\\]</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 18
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>\\[\\] </code></pre>"
Received: "<p>~~~ [] ~~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 19
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"https://example.com?find=%5C*\">https://example.com?find=\\*</a></p>"
Received: "<https://example.com?find=\\*>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 20
(pass) CommonMark Spec Test Suite > Backslash escapes > Example 21 [0.10ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>"
Received: "<p>[foo](/bar* &quot;ti*tle&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 22
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/bar*\" title=\"ti*tle\">foo</a></p>"
Received: "<p>[foo]</p> <p>[foo]: /bar* &quot;ti*tle&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 23
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-foo+bar\">foo </code></pre>"
Received: "<pre><code>foo</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 24
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p> &amp; © Æ Ď ¾ ℋ ⅆ ∲ ≧̸</p>"
Received: "<p>&amp;nbsp; &amp;amp; &amp;copy; &amp;AElig; &amp;Dcaron; &amp;frac34; &amp;HilbertSpace; &amp;DifferentialD; &amp;ClockwiseContourIntegral; &amp;ngE;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 25
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p># Ӓ Ϡ �</p>"
Received: "<p>&amp;#35; &amp;#1234; &amp;#992; &amp;#0;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 26
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&quot; ആ ಫ</p>"
Received: "<p>&amp;#X22; &amp;#XD06; &amp;#xcab;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 27 [0.36ms]
(pass) CommonMark Spec Test Suite > Entity and numeric character references > Example 28
(pass) CommonMark Spec Test Suite > Entity and numeric character references > Example 29
(pass) CommonMark Spec Test Suite > Entity and numeric character references > Example 30
(pass) CommonMark Spec Test Suite > Entity and numeric character references > Example 31
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>"
Received: "<p>[foo](/f&amp;ouml;&amp;ouml; &quot;f&amp;ouml;&amp;ouml;&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 32
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/f%C3%B6%C3%B6\" title=\"föö\">foo</a></p>"
Received: "<p>[foo]</p> <p>[foo]: /f&amp;ouml;&amp;ouml; &quot;f&amp;ouml;&amp;ouml;&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 33 [0.14ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-föö\">foo </code></pre>"
Received: "<pre><code>foo</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 34
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>f&amp;ouml;&amp;ouml;</code></p>"
Received: "<p><code class=\"inline\">f&amp;ouml;&amp;ouml;</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 35
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>f&amp;ouml;f&amp;ouml; </code></pre>"
Received: "<pre><code>f&amp;ouml;f&amp;ouml;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 36
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*foo* <em>foo</em></p>"
Received: "<p>&amp;#42;foo&amp;#42; <em>foo</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 37
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>* foo</p> <ul> <li>foo</li> </ul>"
Received: "<p>&amp;#42; foo</p> <ul> <li><p>foo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 38 [0.18ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo bar</p>"
Received: "<p>foo&amp;#10;&amp;#10;bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 39
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p> foo</p>"
Received: "<p>&amp;#9;foo</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 40
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[a](url &quot;tit&quot;)</p>"
Received: "<p>[a](url &amp;quot;tit&amp;quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 41 [0.11ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>`one</li> <li>two`</li> </ul>"
Received: "<ul> <li><p>`one</p></li><li><p>two`</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Precedence > Example 42 [0.01ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr /> <hr /> <hr />"
Received: "<hr> <hr> <hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 43
(pass) CommonMark Spec Test Suite > Thematic breaks > Example 44
(pass) CommonMark Spec Test Suite > Thematic breaks > Example 45
(pass) CommonMark Spec Test Suite > Thematic breaks > Example 46
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr /> <hr /> <hr />"
Received: "<hr> <hr> <hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 47
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>*** </code></pre>"
Received: "<hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 48
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo ***</p>"
Received: "<p>Foo</p> <hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 49
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<p><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong><strong></strong>_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 50
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<ul> <li><p>- -</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 51 [0.17ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<p> <strong> * </strong> <em> </em><em> </em> **</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 52
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<ul> <li><p>- - -</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 53
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr />"
Received: "<ul> <li><p>- - - </p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 54 [0.10ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_ _ _ _ a</p> <p>a------</p> <p>---a---</p>"
Received: "<p><em> </em> <em> </em> a</p> <p>a------</p> <p>---a---</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 55
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>-</em></p>"
Received: "<p> <em>-</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 56
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> </ul> <hr /> <ul> <li>bar</li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <hr> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 57 [0.12ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo</p> <hr /> <p>bar</p>"
Received: "<p>Foo</p> <hr> <p>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 58 [0.02ms]
(pass) CommonMark Spec Test Suite > Thematic breaks > Example 59
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>Foo</li> </ul> <hr /> <ul> <li>Bar</li> </ul>"
Received: "<ul> <li><p>Foo</p></li><li><p><em> </em></p></li><li><p>Bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 60
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>Foo</li> <li> <hr /> </li> </ul>"
Received: "<ul> <li><p>Foo</p></li><li><p><em> </em> *</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 61
(pass) CommonMark Spec Test Suite > ATX headings > Example 62
(pass) CommonMark Spec Test Suite > ATX headings > Example 63
(pass) CommonMark Spec Test Suite > ATX headings > Example 64
(pass) CommonMark Spec Test Suite > ATX headings > Example 65
(pass) CommonMark Spec Test Suite > ATX headings > Example 66
(pass) CommonMark Spec Test Suite > ATX headings > Example 67
(pass) CommonMark Spec Test Suite > ATX headings > Example 68 [0.01ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code># foo </code></pre>"
Received: "<pre><code># foo</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 69
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo # bar</p>"
Received: "<p>foo</p> <pre><code># bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 70
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h2>foo</h2> <h3>bar</h3>"
Received: "<h2>foo ##</h2> <h3>bar ###</h3>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 71
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1>foo</h1> <h5>foo</h5>"
Received: "<h1>foo ##################################</h1> <h5>foo ##</h5>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 72
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h3>foo</h3>"
Received: "<h3>foo ###</h3>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 73
(pass) CommonMark Spec Test Suite > ATX headings > Example 74
(pass) CommonMark Spec Test Suite > ATX headings > Example 75
(pass) CommonMark Spec Test Suite > ATX headings > Example 76
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr /> <h2>foo</h2> <hr />"
Received: "<p><strong></strong></p> <h2>foo</h2> <p><strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 77
(pass) CommonMark Spec Test Suite > ATX headings > Example 78
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h2></h2> <h1></h1> <h3></h3>"
Received: "<h2></h2> <p>#</p> <h3>###</h3>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > ATX headings > Example 79
(pass) CommonMark Spec Test Suite > Setext headings > Example 80
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1>Foo <em>bar baz</em></h1>"
Received: "<p>Foo <em>bar baz</em> ====</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 81
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1>Foo <em>bar baz</em></h1>"
Received: "<p> Foo <em>bar baz</em> ====</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 82
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h2>Foo</h2> <h1>Foo</h1>"
Received: "<h2>Foo</h2> <p>Foo =</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 83
(pass) CommonMark Spec Test Suite > Setext headings > Example 84
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>Foo --- Foo </code></pre> <hr />"
Received: "<h2>Foo</h2> <h2>Foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 85
(pass) CommonMark Spec Test Suite > Setext headings > Example 86
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo ---</p>"
Received: "<h2>Foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 87
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo = =</p> <p>Foo</p> <hr />"
Received: "<p>Foo = =</p> <p>Foo --- -</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 88
(pass) CommonMark Spec Test Suite > Setext headings > Example 89
(pass) CommonMark Spec Test Suite > Setext headings > Example 90
(pass) CommonMark Spec Test Suite > Setext headings > Example 91
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>Foo</p> </blockquote> <hr />"
Received: "<h2>&gt; Foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 92
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>foo bar ===</p> </blockquote>"
Received: "<blockquote> <p>foo</p> </blockquote> <h1>bar</h1>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 93
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>Foo</li> </ul> <hr />"
Received: "<h2>- Foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 94
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h2>Foo Bar</h2>"
Received: "<p>Foo Bar</p> <hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 95
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr /> <h2>Foo</h2> <h2>Bar</h2> <p>Baz</p>"
Received: "<hr> <h2>Foo</h2> <h2>Bar</h2> <p>Baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 96
(pass) CommonMark Spec Test Suite > Setext headings > Example 97
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<hr /> <hr />"
Received: "<hr> <hr>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 98
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> </ul> <hr />"
Received: "<h2>- foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 99
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>foo </code></pre> <hr />"
Received: "<h2>foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 100
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>foo</p> </blockquote> <hr />"
Received: "<h2>&gt; foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 101
(pass) CommonMark Spec Test Suite > Setext headings > Example 102
(pass) CommonMark Spec Test Suite > Setext headings > Example 103
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo bar</p> <hr /> <p>baz</p>"
Received: "<p>Foo bar</p> <hr> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 104
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo bar</p> <hr /> <p>baz</p>"
Received: "<p>Foo bar</p> <ul> <li><p><em> </em></p></li> </ul> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Setext headings > Example 105 [0.84ms]
(pass) CommonMark Spec Test Suite > Setext headings > Example 106
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>a simple indented code block </code></pre>"
Received: "<pre><code>a simple indented code block</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 107
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <p>bar</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <pre><code>bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 108
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>foo</p> <ul> <li>bar</li> </ul> </li> </ol>"
Received: "<ol> <li><p>foo</p></li> </ol> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 109
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>&lt;a/&gt; *hi* - one </code></pre>"
Received: "<pre><code>&lt;a/&gt; *hi*</code></pre> <ul> <li><p>one</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 110
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>chunk1 chunk2 chunk3 </code></pre>"
Received: "<pre><code>chunk1</code></pre> <pre><code>chunk2</code></pre> <pre><code>chunk3</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 111 [0.17ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>chunk1 chunk2 </code></pre>"
Received: "<pre><code>chunk1 chunk2</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 112
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo bar</p>"
Received: "<p>Foo</p> <pre><code>bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 113
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>foo </code></pre> <p>bar</p>"
Received: "<pre><code>foo</code></pre> <p>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 114
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1>Heading</h1> <pre><code>foo </code></pre> <h2>Heading</h2> <pre><code>foo </code></pre> <hr />"
Received: "<h1>Heading</h1> <pre><code>foo</code></pre> <h2>Heading</h2> <h2>foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 115 [0.11ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code> foo bar </code></pre>"
Received: "<pre><code> foo bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 116
(pass) CommonMark Spec Test Suite > Indented code blocks > Example 117
(pass) CommonMark Spec Test Suite > Indented code blocks > Example 118
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>&lt; &gt; </code></pre>"
Received: "<pre><code>&lt; &gt;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 119
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>&lt; &gt; </code></pre>"
Received: "<p>~~~</p> < <blockquote> </blockquote> <p>~~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 120
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo</code></p>"
Received: "<p><code class=\"inline\"></code> foo <code class=\"inline\"></code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 121
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ~~~ </code></pre>"
Received: "<pre><code>aaa ~~~</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 122
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ``` </code></pre>"
Received: "<p>~~~ aaa</p> <pre><code>~~~ </code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 123
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ``` </code></pre>"
Received: "<pre><code>aaa</code></pre> <pre><code></code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 124
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ~~~ </code></pre>"
Received: "<p>~~~~ aaa ~~~ ~~~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 125
(pass) CommonMark Spec Test Suite > Fenced code blocks > Example 126
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code> ``` aaa </code></pre>"
Received: "<pre><code></code></pre> <p>aaa</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 127
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <pre><code>aaa </code></pre> </blockquote> <p>bbb</p>"
Received: "<blockquote> <pre><code>aaa</code></pre> </blockquote> <p>bbb</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 128
(pass) CommonMark Spec Test Suite > Fenced code blocks > Example 129
(pass) CommonMark Spec Test Suite > Fenced code blocks > Example 130
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa aaa </code></pre>"
Received: "<pre><code> aaa aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 131
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa aaa aaa </code></pre>"
Received: "<pre><code>aaa aaa aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 132
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa aaa aaa </code></pre>"
Received: "<pre><code> aaa aaa aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 133 [0.41ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>``` aaa ``` </code></pre>"
Received: "<pre><code> aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 134 [0.02ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa </code></pre>"
Received: "<pre><code>aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 135
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa </code></pre>"
Received: "<pre><code>aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 136
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ``` </code></pre>"
Received: "<pre><code>aaa</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 137
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code> </code> aaa</p>"
Received: "<pre><code>aaa </code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 138
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa ~~~ ~~ </code></pre>"
Received: "<p>~~~~~~ aaa ~~~ ~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 139
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo</p> <pre><code>bar </code></pre> <p>baz</p>"
Received: "<p>foo</p> <pre><code>bar</code></pre> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 140
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h2>foo</h2> <pre><code>bar </code></pre> <h1>baz</h1>"
Received: "<h2>foo</h2> <p>~~~ bar ~~~</p> <h1>baz</h1>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 141
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-ruby\">def foo(x) return 3 end </code></pre>"
Received: "<pre><code>def foo(x) return 3 end</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 142
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-ruby\">def foo(x) return 3 end </code></pre>"
Received: "<p>~~~~ ruby startline=3 $%@#$ def foo(x) return 3 end ~~~~~~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 143
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-;\"></code></pre>"
Received: "<pre><code></code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 144
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>aa</code> foo</p>"
Received: "<pre><code>foo </code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 145
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code class=\"language-aa\">foo </code></pre>"
Received: "<p>~~~ aa <code class=\"inline\"></code>` ~~~ foo ~~~</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 146
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>``` aaa </code></pre>"
Received: "<pre><code></code></pre> <pre><code></code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 147
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<table><tr><td> <pre> **Hello**, <p><em>world</em>. </pre></p> </td></tr></table>"
Received: "<table><tr><td> <pre> <p><strong>Hello</strong>,</p> <p><em>world</em>.</p> </pre> </td></tr></table>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 148
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<table> <tr> <td> hi </td> </tr> </table> <p>okay.</p>"
Received: "<table> <tr> <pre><code>&lt;td&gt; hi &lt;/td&gt;</code></pre> </tr> </table> <p>okay.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 149
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div> *hello* <foo><a>"
Received: "<div> <p> <em>hello</em></p> <pre><code> &lt;foo&gt;&lt;a&gt;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 150
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "</div> *foo*"
Received: "</div> <p><em>foo</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 151
(pass) CommonMark Spec Test Suite > HTML blocks > Example 152
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div id=\"foo\" class=\"bar\"> </div>"
Received: "<div id=\"foo\" <p> class=&quot;bar&quot;&gt;</p> </div>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 153
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div id=\"foo\" class=\"bar baz\"> </div>"
Received: "<div id=\"foo\" class=\"bar <p> baz&quot;&gt;</p> </div>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 154
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div> *foo* <p><em>bar</em></p>"
Received: "<div> <p><em>foo</em></p> <p><em>bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 155
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div id=\"foo\" *hi*"
Received: "<div id=\"foo\" <p><em>hi</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 156
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div class foo"
Received: "<div class <p>foo</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 157
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div *???-&&&-<--- *foo*"
Received: "<div *???-&&&-<--- <p><em>foo</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 158
(pass) CommonMark Spec Test Suite > HTML blocks > Example 159
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<table><tr><td> foo </td></tr></table>"
Received: "<table><tr><td> <p>foo</p> </td></tr></table>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 160
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div></div> ``` c int x = 33; ```"
Received: "<div></div> <pre><code>int x = 33;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 161
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<a href=\"foo\"> *bar* </a>"
Received: "<a href=\"foo\"> <p><em>bar</em></p> </a>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 162
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<Warning> *bar* </Warning>"
Received: "<Warning> <p><em>bar</em></p> </Warning>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 163
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<i class=\"foo\"> *bar* </i>"
Received: "<i class=\"foo\"> <p><em>bar</em></p> </i>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 164
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "</ins> *bar*"
Received: "</ins> <p><em>bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 165
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<del> *foo* </del>"
Received: "<del> <p><em>foo</em></p> </del>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 166
(pass) CommonMark Spec Test Suite > HTML blocks > Example 167
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><del><em>foo</em></del></p>"
Received: "<del>*foo*</del>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 168
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre language=\"haskell\"><code> import Text.HTML.TagSoup main :: IO () main = print $ parseTags tags </code></pre> <p>okay</p>"
Received: "<pre language=\"haskell\"><code> <p>import Text.HTML.TagSoup</p> <p>main :: IO () main = print $ parseTags tags</p> </code></pre> <p>okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 169
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<script type=\"text/javascript\"> // JavaScript example document.getElementById(\"demo\").innerHTML = \"Hello JavaScript!\"; </script> <p>okay</p>"
Received: "<script type=\"text/javascript\"> <p>// JavaScript example</p> <p>document.getElementById(&quot;demo&quot;).innerHTML = &quot;Hello JavaScript!&quot;;</p> </script> <p>okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 170
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<textarea> *foo* _bar_ </textarea>"
Received: "<textarea> <p><em>foo</em></p> <p><em>bar</em></p> </textarea>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 171
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<style type=\"text/css\"> h1 {color:red;} p {color:blue;} </style> <p>okay</p>"
Received: "<style <p> type=&quot;text/css&quot;&gt; h1 {color:red;}</p> <p>p {color:blue;}</p> </style> <p>okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 172
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<style type=\"text/css\"> foo"
Received: "<style <p> type=&quot;text/css&quot;&gt;</p> <p>foo</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 173
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <div> foo </blockquote> <p>bar</p>"
Received: "<blockquote> <div> <p>foo</p> </blockquote> <p>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 174
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <div> </li> <li>foo</li> </ul>"
Received: "<ul> <li><p><div></p></li><li><p>foo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 175
(pass) CommonMark Spec Test Suite > HTML blocks > Example 176
(pass) CommonMark Spec Test Suite > HTML blocks > Example 177
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<script> foo </script>1. *bar*"
Received: "<script> <p>foo</p> </script>1. *bar*"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 178 [1.35ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<!-- Foo bar baz --> <p>okay</p>"
Received: "<!-- Foo <p>bar baz --&gt; okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 179
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<?php echo '>'; ?> <p>okay</p>"
Received: "<?php <p> echo '&gt;';</p> <p>?&gt; okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 180
(pass) CommonMark Spec Test Suite > HTML blocks > Example 181
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<![CDATA[ function matchwo(a,b) { if (a < b && a < 0) then { return 1; } else { return 0; } } ]]> <p>okay</p>"
Received: "<![CDATA[ <p>function matchwo(a,b) { if (a &lt; b &amp;&amp; a &lt; 0) then {</p> <pre><code>return 1;</code></pre> <p> } else {</p> <pre><code>return 0;</code></pre> <p> } } ]]&gt; okay</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 182 [0.17ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<!-- foo --> <pre><code>&lt;!-- foo --&gt; </code></pre>"
Received: "<!-- foo --> <pre><code>&lt;!-- foo --&gt;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 183
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div> <pre><code>&lt;div&gt; </code></pre>"
Received: "<div> <pre><code>&lt;div&gt;</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 184
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo</p> <div> bar </div>"
Received: "<p>Foo</p> <div> <p>bar</p> </div>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 185 [0.10ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div> bar </div> *foo*"
Received: "<div> <p>bar</p> </div> <p><em>foo</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 186
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo <a href=\"bar\"> baz</p>"
Received: "<p>Foo</p> <a href=\"bar\"> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 187
(pass) CommonMark Spec Test Suite > HTML blocks > Example 188
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<div> *Emphasized* text. </div>"
Received: "<div> <p><em>Emphasized</em> text.</p> </div>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 189
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<table> <tr> <td> Hi </td> </tr> </table>"
Received: "<table> <tr> <td> <p>Hi</p> </td> </tr> </table>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 190
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<table> <tr> <pre><code>&lt;td&gt; Hi &lt;/td&gt; </code></pre> </tr> </table>"
Received: "<table> <tr> <pre><code>&lt;td&gt; Hi &lt;/td&gt;</code></pre> </tr> </table>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > HTML blocks > Example 191
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>[foo]: /url &quot;title&quot;</p> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 192
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"the title\">foo</a></p>"
Received: "<p> [foo]: </p> <pre><code> /url 'the title' </code></pre> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 193
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"my_(url)\" title=\"title (with parens)\">Foo*bar]</a></p>"
Received: "<p>[Foo*bar]]:my_(url) 'title (with parens)'</p> <p>[Foo*bar]]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 194
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"my%20url\" title=\"title\">Foo bar</a></p>"
Received: "<p>[Foo bar]:</p> <my url> <p>'title'</p> <p>[Foo bar]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 195 [0.34ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\" title line1 line2 \">foo</a></p>"
Received: "<p>[foo]: /url ' title line1 line2 '</p> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 196
(pass) CommonMark Spec Test Suite > Link reference definitions > Example 197
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">foo</a></p>"
Received: "<p>[foo]: /url</p> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 198 [0.11ms]
(pass) CommonMark Spec Test Suite > Link reference definitions > Example 199
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"\">foo</a></p>"
Received: "<p>[foo]: <></p> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 200 [0.05ms]
(pass) CommonMark Spec Test Suite > Link reference definitions > Example 201
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url%5Cbar*baz\" title=\"foo&quot;bar\\baz\">foo</a></p>"
Received: "<p>[foo]: /url\\bar*baz &quot;foo\\&quot;bar\\baz&quot;</p> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 202
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"url\">foo</a></p>"
Received: "<p>[foo]</p> <p>[foo]: url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 203
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"first\">foo</a></p>"
Received: "<p>[foo]</p> <p>[foo]: first [foo]: second</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 204
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">Foo</a></p>"
Received: "<p>[FOO]: /url</p> <p>[Foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 205
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/%CF%86%CE%BF%CF%85\">αγω</a></p>"
Received: "<p>[ΑΓΩ]: /φου</p> <p>[αγω]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 206
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: ""
Received: "<p>[foo]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 207
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>bar</p>"
Received: "<p>[ foo ]: /url bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 208
(pass) CommonMark Spec Test Suite > Link reference definitions > Example 209
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&quot;title&quot; ok</p>"
Received: "<p>[foo]: /url &quot;title&quot; ok</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 210
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>[foo]: /url &quot;title&quot; </code></pre> <p>[foo]</p>"
Received: "<pre><code>[foo]: /url &quot;title&quot;</code></pre> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 211
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>[foo]: /url </code></pre> <p>[foo]</p>"
Received: "<pre><code>[foo]: /url</code></pre> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 212
(pass) CommonMark Spec Test Suite > Link reference definitions > Example 213
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1><a href=\"/url\">Foo</a></h1> <blockquote> <p>bar</p> </blockquote>"
Received: "<h1>[Foo]</h1> <p>[foo]: /url</p> <blockquote> <p>bar</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 214
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<h1>bar</h1> <p><a href=\"/url\">foo</a></p>"
Received: "<p>[foo]: /url bar === [foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 215
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>=== <a href=\"/url\">foo</a></p>"
Received: "<h1>[foo]: /url</h1> <p>[foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 216
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/foo-url\" title=\"foo\">foo</a>, <a href=\"/bar-url\" title=\"bar\">bar</a>, <a href=\"/baz-url\">baz</a></p>"
Received: "<p>[foo]: /foo-url &quot;foo&quot; [bar]: /bar-url &quot;bar&quot; [baz]: /baz-url</p> <p>[foo], [bar], [baz]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 217
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">foo</a></p> <blockquote> </blockquote>"
Received: "<p>[foo]</p> <blockquote> <p>[foo]: /url</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 218
(pass) CommonMark Spec Test Suite > Paragraphs > Example 219
(pass) CommonMark Spec Test Suite > Paragraphs > Example 220
(pass) CommonMark Spec Test Suite > Paragraphs > Example 221
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>aaa bbb</p>"
Received: "<p> aaa bbb</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Paragraphs > Example 222
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>aaa bbb ccc</p>"
Received: "<p>aaa</p> <pre><code> bbb ccc</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Paragraphs > Example 223
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>aaa bbb</p>"
Received: "<p> aaa bbb</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Paragraphs > Example 224
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>aaa </code></pre> <p>bbb</p>"
Received: "<pre><code>aaa</code></pre> <p>bbb</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Paragraphs > Example 225
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>aaa<br /> bbb</p>"
Received: "<p>aaa bbb </p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Paragraphs > Example 226
(pass) CommonMark Spec Test Suite > Blank lines > Example 227
(pass) CommonMark Spec Test Suite > Block quotes > Example 228
(pass) CommonMark Spec Test Suite > Block quotes > Example 229
(pass) CommonMark Spec Test Suite > Block quotes > Example 230
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>&gt; # Foo &gt; bar &gt; baz </code></pre>"
Received: "<blockquote> <h1>Foo</h1> <p>bar baz</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 231
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <h1>Foo</h1> <p>bar baz</p> </blockquote>"
Received: "<blockquote> <h1>Foo</h1> <p>bar</p> </blockquote> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 232
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>bar baz foo</p> </blockquote>"
Received: "<blockquote> <p>bar</p> </blockquote> <p>baz</p> <blockquote> <p>foo</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 233
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>foo</p> </blockquote> <hr />"
Received: "<h2>&gt; foo</h2>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 234
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <ul> <li>foo</li> </ul> </blockquote> <ul> <li>bar</li> </ul>"
Received: "<blockquote> <ul> <li><p>foo</p></li> </ul> </blockquote> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 235
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <pre><code>foo </code></pre> </blockquote> <pre><code>bar </code></pre>"
Received: "<blockquote> <pre><code>foo</code></pre> </blockquote> <pre><code>bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 236
(pass) CommonMark Spec Test Suite > Block quotes > Example 237
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>foo - bar</p> </blockquote>"
Received: "<blockquote> <p>foo</p> </blockquote> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 238
(pass) CommonMark Spec Test Suite > Block quotes > Example 239
(pass) CommonMark Spec Test Suite > Block quotes > Example 240
(pass) CommonMark Spec Test Suite > Block quotes > Example 241
(pass) CommonMark Spec Test Suite > Block quotes > Example 242
(pass) CommonMark Spec Test Suite > Block quotes > Example 243
(pass) CommonMark Spec Test Suite > Block quotes > Example 244 [0.01ms]
(pass) CommonMark Spec Test Suite > Block quotes > Example 245
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>aaa</p> </blockquote> <hr /> <blockquote> <p>bbb</p> </blockquote>"
Received: "<blockquote> <p>aaa</p> </blockquote> <hr> <blockquote> <p>bbb</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 246 [0.02ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <p>bar baz</p> </blockquote>"
Received: "<blockquote> <p>bar</p> </blockquote> <p>baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 247
(pass) CommonMark Spec Test Suite > Block quotes > Example 248
(pass) CommonMark Spec Test Suite > Block quotes > Example 249
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <blockquote> <blockquote> <p>foo bar</p> </blockquote> </blockquote> </blockquote>"
Received: "<blockquote> <blockquote> <blockquote> <p>foo</p> </blockquote> </blockquote> </blockquote> <p>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 250
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <blockquote> <blockquote> <p>foo bar baz</p> </blockquote> </blockquote> </blockquote>"
Received: "<blockquote> <blockquote> <blockquote> <p>foo</p> </blockquote> </blockquote> <p>bar</p> <blockquote> <p>baz</p> </blockquote> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 251
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <pre><code>code </code></pre> </blockquote> <blockquote> <p>not code</p> </blockquote>"
Received: "<blockquote> <pre><code>code</code></pre> </blockquote> <blockquote> <p> not code</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Block quotes > Example 252
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote>"
Received: "<p>A paragraph with two lines.</p> <pre><code>indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 253
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code>with two lines.</code></pre> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 254
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>one</li> </ul> <p>two</p>"
Received: "<ul> <li><p>one</p></li> </ul> <p> two</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 255
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>one</p> <p>two</p> </li> </ul>"
Received: "<ul> <li><p>one</p></li> </ul> <p> two</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 256
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>one</li> </ul> <pre><code> two </code></pre>"
Received: "<ul> <li><p>one</p></li> </ul> <pre><code> two</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 257
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>one</p> <p>two</p> </li> </ul>"
Received: "<ul> <li><p>one</p></li> </ul> <pre><code> two</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 258 [0.37ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <blockquote> <ol> <li> <p>one</p> <p>two</p> </li> </ol> </blockquote> </blockquote>"
Received: "<blockquote> <blockquote> <ol> <li><p>one</p></li> </ol> <pre><code>two</code></pre> </blockquote> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 259
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <blockquote> <ul> <li>one</li> </ul> <p>two</p> </blockquote> </blockquote>"
Received: "<blockquote> <blockquote> <ul> <li><p>one</p></li> </ul> <p>two</p> </blockquote> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 260
(pass) CommonMark Spec Test Suite > List items > Example 261
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <p>bar</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <p> bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 262
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>foo</p> <pre><code>bar </code></pre> <p>baz</p> <blockquote> <p>bam</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>foo</p></li> </ol> <pre><code> bar</code></pre> <pre><code>baz</code></pre> <blockquote> <p>bam</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 263
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>Foo</p> <pre><code>bar baz </code></pre> </li> </ul>"
Received: "<ul> <li><p>Foo</p></li> </ul> <pre><code> bar</code></pre> <pre><code> baz</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 264
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"123456789\"> <li>ok</li> </ol>"
Received: "<ol> <li><p>ok</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 265
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>1234567890. not ok</p>"
Received: "<ol> <li><p>not ok</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 266
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"0\"> <li>ok</li> </ol>"
Received: "<ol> <li><p>ok</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 267
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"3\"> <li>ok</li> </ol>"
Received: "<ol> <li><p>ok</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 268 [0.33ms]
(pass) CommonMark Spec Test Suite > List items > Example 269
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <pre><code>bar </code></pre> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <pre><code> bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 270
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"10\"> <li> <p>foo</p> <pre><code>bar </code></pre> </li> </ol>"
Received: "<ol> <li><p>foo</p></li> </ol> <pre><code> bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 271
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>indented code </code></pre> <p>paragraph</p> <pre><code>more code </code></pre>"
Received: "<pre><code>indented code</code></pre> <p>paragraph</p> <pre><code>more code</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 272
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <pre><code>indented code </code></pre> <p>paragraph</p> <pre><code>more code </code></pre> </li> </ol>"
Received: "<ol> <li><p>indented code</p></li> </ol> <p> paragraph</p> <pre><code> more code</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 273
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <pre><code> indented code </code></pre> <p>paragraph</p> <pre><code>more code </code></pre> </li> </ol>"
Received: "<ol> <li><p>indented code</p></li> </ol> <p> paragraph</p> <pre><code> more code</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 274
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo</p> <p>bar</p>"
Received: "<p> foo</p> <p>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 275
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> </ul> <p>bar</p>"
Received: "<ul> <li><p>foo</p></li> </ul> <p> bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 276
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <p>bar</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <p> bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 277
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li> <pre><code>bar </code></pre> </li> <li> <pre><code>baz </code></pre> </li> </ul>"
Received: "<p>- foo -</p> <pre><code> bar</code></pre> <p>-</p> <pre><code> baz</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 278
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> </ul>"
Received: "<ul> <li><p></p></li> </ul> <p> foo</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 279
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li></li> </ul> <p>foo</p>"
Received: "<p>-</p> <p> foo</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 280
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li></li> <li>bar</li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <p>-</p> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 281
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li></li> <li>bar</li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p></p></li><li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 282
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li>foo</li> <li></li> <li>bar</li> </ol>"
Received: "<ol> <li><p>foo</p></li> </ol> <p>2.</p> <ol> <li><p>bar</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 283
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li></li> </ul>"
Received: "<p>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 284
(pass) CommonMark Spec Test Suite > List items > Example 285
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code> with two lines.</code></pre> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 286
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code> with two lines.</code></pre> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 287
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code> with two lines.</code></pre> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 288
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<pre><code>1. A paragraph with two lines. indented code &gt; A block quote. </code></pre>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code> with two lines.</code></pre> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 289
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>A paragraph with two lines.</p> <pre><code>indented code </code></pre> <blockquote> <p>A block quote.</p> </blockquote> </li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <p>with two lines.</p> <pre><code> indented code</code></pre> <blockquote> <p>A block quote.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 290
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li>A paragraph with two lines.</li> </ol>"
Received: "<ol> <li><p>A paragraph</p></li> </ol> <pre><code>with two lines.</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 291
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <ol> <li> <blockquote> <p>Blockquote continued here.</p> </blockquote> </li> </ol> </blockquote>"
Received: "<blockquote> <ol> <li><p>&gt; Blockquote</p></li> </ol> </blockquote> <p>continued here.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 292
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<blockquote> <ol> <li> <blockquote> <p>Blockquote continued here.</p> </blockquote> </li> </ol> </blockquote>"
Received: "<blockquote> <ol> <li><p>&gt; Blockquote</p></li> </ol> <p>continued here.</p> </blockquote>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 293
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo <ul> <li>bar <ul> <li>baz <ul> <li>boo</li> </ul> </li> </ul> </li> </ul> </li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li><li><p>boo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 294
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li>bar</li> <li>baz</li> <li>boo</li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li><li><p>boo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 295
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"10\"> <li>foo <ul> <li>bar</li> </ul> </li> </ol>"
Received: "<p>10) foo</p> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 296
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol start=\"10\"> <li>foo</li> </ol> <ul> <li>bar</li> </ul>"
Received: "<p>10) foo</p> <ul> <li><p>bar</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 297
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <ul> <li>foo</li> </ul> </li> </ul>"
Received: "<ul> <li><p>- foo</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 298
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <ul> <li> <ol start=\"2\"> <li>foo</li> </ol> </li> </ul> </li> </ol>"
Received: "<ol> <li><p>- 2. foo</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 299
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <h1>Foo</h1> </li> <li> <h2>Bar</h2> baz</li> </ul>"
Received: "<ul> <li><p># Foo</p></li><li><p>Bar</p></li> </ul> <hr> <p> baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > List items > Example 300
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li>bar</li> </ul> <ul> <li>baz</li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 301 [0.04ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li>foo</li> <li>bar</li> </ol> <ol start=\"3\"> <li>baz</li> </ol>"
Received: "<ol> <li><p>foo</p></li><li><p>bar</p></li> </ol> <p>3) baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 302
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>Foo</p> <ul> <li>bar</li> <li>baz</li> </ul>"
Received: "<p>Foo</p> <ul> <li><p>bar</p></li><li><p>baz</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 303 [0.06ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>The number of windows in my house is 14. The number of doors is 6.</p>"
Received: "<p>The number of windows in my house is</p> <ol> <li><p>The number of doors is 6.</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 304
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>The number of windows in my house is</p> <ol> <li>The number of doors is 6.</li> </ol>"
Received: "<p>The number of windows in my house is</p> <ol> <li><p>The number of doors is 6.</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 305
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> </li> <li> <p>bar</p> </li> <li> <p>baz</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li> </ul> <ul> <li><p>bar</p></li> </ul> <ul> <li><p>baz</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 306
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo <ul> <li>bar <ul> <li> <p>baz</p> <p>bim</p> </li> </ul> </li> </ul> </li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li><li><p>baz</p></li> </ul> <pre><code> bim</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 307
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>foo</li> <li>bar</li> </ul> <!-- --> <ul> <li>baz</li> <li>bim</li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li> </ul> <!-- --> <ul> <li><p>baz</p></li><li><p>bim</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 308
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <p>notcode</p> </li> <li> <p>foo</p> </li> </ul> <!-- --> <pre><code>code </code></pre>"
Received: "<ul> <li><p>foo</p></li> </ul> <pre><code>notcode</code></pre> <ul> <li><p>foo</p></li> </ul> <!-- --> <pre><code>code</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 309
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a</li> <li>b</li> <li>c</li> <li>d</li> <li>e</li> <li>f</li> <li>g</li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li><li><p>c</p></li><li><p>d</p></li><li><p>e</p></li><li><p>f</p></li><li><p>g</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 310
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>a</p> </li> <li> <p>b</p> </li> <li> <p>c</p> </li> </ol>"
Received: "<ol> <li><p>a</p></li> </ol> <ol> <li><p>b</p></li> </ol> <ol> <li><p>c</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 311
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a</li> <li>b</li> <li>c</li> <li>d - e</li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li><li><p>c</p></li><li><p>d</p></li><li><p>e</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 312 [0.38ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <p>a</p> </li> <li> <p>b</p> </li> </ol> <pre><code>3. c </code></pre>"
Received: "<ol> <li><p>a</p></li> </ol> <ol> <li><p>b</p></li> </ol> <ol> <li><p>c</p></li> </ol>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 313
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>a</p> </li> <li> <p>b</p> </li> <li> <p>c</p> </li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li> </ul> <ul> <li><p>c</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 314
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>a</p> </li> <li></li> <li> <p>c</p> </li> </ul>"
Received: "<ul> <li><p>a</p></li> </ul> <p>*</p> <ul> <li><p>c</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 315 [0.14ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>a</p> </li> <li> <p>b</p> <p>c</p> </li> <li> <p>d</p> </li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li> </ul> <p> c</p> <ul> <li><p>d</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 316
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>a</p> </li> <li> <p>b</p> </li> <li> <p>d</p> </li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li> </ul> <p> [ref]: /url</p> <ul> <li><p>d</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 317
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a</li> <li> <pre><code>b </code></pre> </li> <li>c</li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p><code class=\"inline\"></code>`</p></li> </ul> <p> b</p> <pre><code>- c </code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 318 [0.15ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a <ul> <li> <p>b</p> <p>c</p> </li> </ul> </li> <li>d</li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li> </ul> <pre><code>c</code></pre> <ul> <li><p>d</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 319 [0.04ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a <blockquote> <p>b</p> </blockquote> </li> <li>c</li> </ul>"
Received: "<ul> <li><p>a</p></li> </ul> <blockquote> <p>b</p> </blockquote> <ul> <li><p>c</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 320
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a <blockquote> <p>b</p> </blockquote> <pre><code>c </code></pre> </li> <li>d</li> </ul>"
Received: "<ul> <li><p>a</p></li> </ul> <blockquote> <p>b</p> </blockquote> <pre><code> c</code></pre> <ul> <li><p>d</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 321 [0.06ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a</li> </ul>"
Received: "<ul> <li><p>a</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 322 [0.04ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li>a <ul> <li>b</li> </ul> </li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 323
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ol> <li> <pre><code>foo </code></pre> <p>bar</p> </li> </ol>"
Received: "<ol> <li><p><code class=\"inline\"></code>`</p></li> </ol> <p> foo</p> <pre><code> bar </code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 324 [0.09ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>foo</p> <ul> <li>bar</li> </ul> <p>baz</p> </li> </ul>"
Received: "<ul> <li><p>foo</p></li><li><p>bar</p></li> </ul> <p> baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 325
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<ul> <li> <p>a</p> <ul> <li>b</li> <li>c</li> </ul> </li> <li> <p>d</p> <ul> <li>e</li> <li>f</li> </ul> </li> </ul>"
Received: "<ul> <li><p>a</p></li><li><p>b</p></li><li><p>c</p></li> </ul> <ul> <li><p>d</p></li><li><p>e</p></li><li><p>f</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Lists > Example 326
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>hi</code>lo`</p>"
Received: "<p><code class=\"inline\">hi</code>lo`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Inlines > Example 327
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo</code></p>"
Received: "<p><code class=\"inline\">foo</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 328
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo ` bar</code></p>"
Received: "<p><code class=\"inline\"></code> foo <code class=\"inline\"> bar </code>`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 329
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>``</code></p>"
Received: "<p><code class=\"inline\"> </code><code class=\"inline\"> </code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 330
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code> `` </code></p>"
Received: "<p><code class=\"inline\"> </code><code class=\"inline\"> </code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 331
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code> a</code></p>"
Received: "<p><code class=\"inline\"> a</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 332
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code> b </code></p>"
Received: "<p><code class=\"inline\"> b </code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 333
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code> </code> <code> </code></p>"
Received: "<p><code class=\"inline\"> </code> <code class=\"inline\"> </code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 334
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo bar baz</code></p>"
Received: "<p><code class=\"inline\"></code> foo bar baz <code class=\"inline\"></code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 335
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo </code></p>"
Received: "<p><code class=\"inline\"></code> foo <code class=\"inline\"></code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 336
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo bar baz</code></p>"
Received: "<p><code class=\"inline\">foo bar baz</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 337
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo\\</code>bar`</p>"
Received: "<p><code class=\"inline\">foo\\</code>bar`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 338
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo`bar</code></p>"
Received: "<p><code class=\"inline\"></code>foo<code class=\"inline\">bar</code>`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 339
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>foo `` bar</code></p>"
Received: "<p><code class=\"inline\"> foo </code><code class=\"inline\"> bar </code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 340
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*foo<code>*</code></p>"
Received: "<p><em>foo`</em>`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 341
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[not a <code>link](/foo</code>)</p>"
Received: "<p>[not a <code class=\"inline\">link](/foo</code>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 342
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>&lt;a href=&quot;</code>&quot;&gt;`</p>"
Received: "<p><code class=\"inline\">&lt;a href=&quot;</code>&quot;&gt;`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 343
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"`\">`</p>"
Received: "<a href=\"`\">`"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 344
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>&lt;https://foo.bar.</code>baz&gt;`</p>"
Received: "<p><code class=\"inline\">&lt;https://foo.bar.</code>baz&gt;`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 345
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"https://foo.bar.%60baz\">https://foo.bar.`baz</a>`</p>"
Received: "<https://foo.bar.`baz>`"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 346
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>```foo``</p>"
Received: "<pre><code></code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 347
(pass) CommonMark Spec Test Suite > Code spans > Example 348
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>`foo<code>bar</code></p>"
Received: "<p><code class=\"inline\">foo</code><code class=\"inline\">bar</code>`</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Code spans > Example 349
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 350
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>a * foo bar*</p>"
Received: "<p>a <em> foo bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 351
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>a*&quot;foo&quot;*</p>"
Received: "<p>a<em>&quot;foo&quot;</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 352
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>* a *</p>"
Received: "<ul> <li><p>a *</p></li> </ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 353
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*$*alpha.</p> <p>*£*bravo.</p> <p>*€*charlie.</p>"
Received: "<p><em>$</em>alpha.</p> <p><em>£</em>bravo.</p> <p><em>€</em>charlie.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 354
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 355
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 356
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 357
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_ foo bar_</p>"
Received: "<p><em> foo bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 358
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>a_&quot;foo&quot;_</p>"
Received: "<p>a<em>&quot;foo&quot;</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 359
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo_bar_</p>"
Received: "<p>foo<em>bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 360
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>5_6_78</p>"
Received: "<p>5<em>6</em>78</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 361
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>пристаням_стремятся_</p>"
Received: "<p>пристаням<em>стремятся</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 362
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>aa_&quot;bb&quot;_cc</p>"
Received: "<p>aa<em>&quot;bb&quot;</em>cc</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 363
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 364
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 365
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*foo bar *</p>"
Received: "<p><em>foo bar </em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 366
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*foo bar *</p>"
Received: "<p><em>foo bar </em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 367
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*(*foo)</p>"
Received: "<p><em>(</em>foo)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 368
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>(<em>foo</em>)</em></p>"
Received: "<p><em>(</em>foo<em>)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 369
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 370
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_foo bar _</p>"
Received: "<p><em>foo bar </em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 371
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_(_foo)</p>"
Received: "<p><em>(</em>foo)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 372
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>(<em>foo</em>)</em></p>"
Received: "<p><em>(</em>foo<em>)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 373
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_foo_bar</p>"
Received: "<p><em>foo</em>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 374
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_пристаням_стремятся</p>"
Received: "<p><em>пристаням</em>стремятся</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 375
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo_bar_baz</em></p>"
Received: "<p><em>foo</em>bar<em>baz</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 376
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 377
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 378
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>** foo bar**</p>"
Received: "<p><strong> foo bar</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 379
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>a**&quot;foo&quot;**</p>"
Received: "<p>a<strong>&quot;foo&quot;</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 380
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 381
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 382
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__ foo bar__</p>"
Received: "<p><strong> foo bar</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 383
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__ foo bar__</p>"
Received: "<p><strong> foo bar</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 384 [1.44ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>a__&quot;foo&quot;__</p>"
Received: "<p>a<strong>&quot;foo&quot;</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 385 [0.01ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo__bar__</p>"
Received: "<p>foo<strong>bar</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 386
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>5__6__78</p>"
Received: "<p>5<strong>6</strong>78</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 387
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>пристаням__стремятся__</p>"
Received: "<p>пристаням<strong>стремятся</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 388
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo, <strong>bar</strong>, baz</strong></p>"
Received: "<p><strong>foo, </strong>bar<strong>, baz</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 389
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 390
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**foo bar **</p>"
Received: "<p><strong>foo bar </strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 391
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**(**foo)</p>"
Received: "<p><strong>(</strong>foo)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 392
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>(<strong>foo</strong>)</em></p>"
Received: "<p><em>(</em><em>foo</em><em>)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 393
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 394
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 395
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 396
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__foo bar __</p>"
Received: "<p><strong>foo bar </strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 397
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__(__foo)</p>"
Received: "<p><strong>(</strong>foo)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 398 [0.30ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>(<strong>foo</strong>)</em></p>"
Received: "<p><em>(</em><em>foo</em><em>)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 399 [0.02ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__foo__bar</p>"
Received: "<p><strong>foo</strong>bar</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 400
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__пристаням__стремятся</p>"
Received: "<p><strong>пристаням</strong>стремятся</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 401
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo__bar__baz</strong></p>"
Received: "<p><strong>foo</strong>bar<strong>baz</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 402
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 403
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <a href=\"/url\">bar</a></em></p>"
Received: "<p><em>foo [bar](/url)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 404
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 405
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <strong>bar</strong> baz</em></p>"
Received: "<p><em>foo </em><em>bar</em><em> baz</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 406
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <em>bar</em> baz</em></p>"
Received: "<p><em>foo </em>bar<em> baz</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 407
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em><em>foo</em> bar</em></p>"
Received: "<p>_<em>foo</em> bar_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 408
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <em>bar</em></em></p>"
Received: "<p><em>foo </em>bar**</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 409
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <strong>bar</strong> baz</em></p>"
Received: "<p><em>foo </em><em>bar</em><em> baz</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 410
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo<strong>bar</strong>baz</em></p>"
Received: "<p><em>foo</em><em>bar</em><em>baz</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 411
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo**bar</em></p>"
Received: "<p><em>foo</em><em>bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 412
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em><strong>foo</strong> bar</em></p>"
Received: "<p><strong>*foo</strong> bar*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 413
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <strong>bar</strong></em></p>"
Received: "<p><em>foo </em><em>bar</em>**</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 414
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo<strong>bar</strong></em></p>"
Received: "<p><em>foo</em><em>bar</em>**</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 415
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<em><strong>bar</strong></em>baz</p>"
Received: "<p>foo<strong>*bar</strong>*baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 416
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<strong><strong><strong>bar</strong></strong></strong>***baz</p>"
Received: "<p>foo<strong></strong><strong>bar</strong><strong></strong>***baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 417
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <strong>bar <em>baz</em> bim</strong> bop</em></p>"
Received: "<p><em>foo </em><em>bar </em>baz<em> bim</em><em> bop</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 418
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <a href=\"/url\"><em>bar</em></a></em></p>"
Received: "<p><em>foo [</em>bar<em>](/url)</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 419
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 420
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**** is not an empty strong emphasis</p>"
Received: "<p><strong></strong> is not an empty strong emphasis</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 421
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <a href=\"/url\">bar</a></strong></p>"
Received: "<p><strong>foo [bar](/url)</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 422
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 423
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 424
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <strong>bar</strong> baz</strong></p>"
Received: "<p><strong>foo </strong>bar<strong> baz</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 425
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong><strong>foo</strong> bar</strong></p>"
Received: "<p><strong></strong>foo<strong> bar</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 426
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <strong>bar</strong></strong></p>"
Received: "<p><strong>foo </strong>bar<strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 427
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 428
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 429
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 430
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <em>bar</em></strong></p>"
Received: "<p><strong>foo *bar</strong>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 431
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <em>bar <strong>baz</strong> bim</em> bop</strong></p>"
Received: "<p><strong>foo *bar </strong>baz<strong> bim* bop</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 432
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong>foo <a href=\"/url\"><em>bar</em></a></strong></p>"
Received: "<p><strong>foo [<em>bar</em>](/url)</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 433
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 434
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>____ is not an empty strong emphasis</p>"
Received: "<p><strong></strong> is not an empty strong emphasis</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 435
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 436
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo <em>*</em></p>"
Received: "<p>foo <em>\\</em>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 437
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 438
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo *****</p>"
Received: "<p>foo <strong></strong>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 439
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo <strong>*</strong></p>"
Received: "<p>foo <strong>\\</strong>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 440
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 441
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 442
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 443
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<strong>foo</strong></p>"
Received: "<p><strong>*foo</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 444
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>***<em>foo</em></p>"
Received: "<p><strong></strong>foo*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 445
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 446
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 447
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 448
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo <em>_</em></p>"
Received: "<p>foo <em>\\</em>_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 449
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 450
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo _____</p>"
Received: "<p>foo <strong></strong>_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 451
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo <strong>_</strong></p>"
Received: "<p>foo <strong>\\</strong>_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 452
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 453
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 454
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 455
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_<strong>foo</strong></p>"
Received: "<p><strong>_foo</strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 456
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>___<em>foo</em></p>"
Received: "<p><strong></strong>foo_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 457
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 458
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 459
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 460
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 461
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 462
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 463
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong><strong>foo</strong></strong></p>"
Received: "<p><strong></strong>foo<strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 464
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong><strong>foo</strong></strong></p>"
Received: "<p><strong></strong>foo<strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 465
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><strong><strong><strong>foo</strong></strong></strong></p>"
Received: "<p><strong></strong><strong>foo</strong><strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 466
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em><strong>foo</strong></em></p>"
Received: "<p><strong>*foo</strong>*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 467
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em><strong><strong>foo</strong></strong></em></p>"
Received: "<p><strong></strong><em>foo</em><strong></strong></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 468
(pass) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 469
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo <strong>bar *baz bim</strong> bam</em></p>"
Received: "<p><em>foo __bar </em>baz bim__ bam*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 470
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**foo <strong>bar baz</strong></p>"
Received: "<p><strong>foo </strong>bar baz**</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 471
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*foo <em>bar baz</em></p>"
Received: "<p><em>foo </em>bar baz*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 472
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<a href=\"/url\">bar*</a></p>"
Received: "<p><em>[bar</em>](/url)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 473
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>_foo <a href=\"/url\">bar_</a></p>"
Received: "<p><em>foo [bar</em>](/url)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 474
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<img src=\"foo\" title=\"*\"/></p>"
Received: "<p><em>&lt;img src=&quot;foo&quot; title=&quot;</em>&quot;/&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 475
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**<a href=\"**\"></p>"
Received: "<p><strong>&lt;a href=&quot;</strong>&quot;&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 476
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__<a href=\"__\"></p>"
Received: "<p><strong>&lt;a href=&quot;</strong>&quot;&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 477
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>a <code>*</code></em></p>"
Received: "<p><em>a `</em>`*</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 478
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>a <code>_</code></em></p>"
Received: "<p><em>a `</em>`_</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 479
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>**a<a href=\"https://foo.bar/?q=**\">https://foo.bar/?q=**</a></p>"
Received: "<p><strong>a&lt;https://foo.bar/?q=</strong>&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 480
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>__a<a href=\"https://foo.bar/?q=__\">https://foo.bar/?q=__</a></p>"
Received: "<p><strong>a&lt;https://foo.bar/?q=</strong>&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 481
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\" title=\"title\">link</a></p>"
Received: "<p>[link](/uri &quot;title&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 482
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link</a></p>"
Received: "<p>[link](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 483
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"./target.md\"></a></p>"
Received: "<p>[](./target.md)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 484
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"\">link</a></p>"
Received: "<p>[link]()</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 485
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"\">link</a></p>"
Received: "<p>[link](<>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 486
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"\"></a></p>"
Received: "<p>[]()</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 487
(pass) CommonMark Spec Test Suite > Links > Example 488
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/my%20uri\">link</a></p>"
Received: "<p>[link](</my uri>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 489
(pass) CommonMark Spec Test Suite > Links > Example 490
(pass) CommonMark Spec Test Suite > Links > Example 491
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"b)c\">a</a></p>"
Received: "<p>[a](<b)c>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 492
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[link](&lt;foo&gt;)</p>"
Received: "<p>[link](<foo\\>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 493
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[a](&lt;b)c [a](&lt;b)c&gt; [a](<b>c)</p>"
Received: "<p>[a](<b)c [a](<b)c> [a](<b>c)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 494
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"(foo)\">link</a></p>"
Received: "<p>[link]((foo))</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 495
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo(and(bar))\">link</a></p>"
Received: "<p>[link](foo(and(bar)))</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 496 [1.96ms]
(pass) CommonMark Spec Test Suite > Links > Example 497
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo(and(bar)\">link</a></p>"
Received: "<p>[link](foo(and(bar))</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 498
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo(and(bar)\">link</a></p>"
Received: "<p>[link](<foo(and(bar)>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 499
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo):\">link</a></p>"
Received: "<p>[link](foo)\\:)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 500
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"#fragment\">link</a></p> <p><a href=\"https://example.com#fragment\">link</a></p> <p><a href=\"https://example.com?foo=3#frag\">link</a></p>"
Received: "<p>[link](#fragment)</p> <p>[link](https://example.com#fragment)</p> <p>[link](https://example.com?foo=3#frag)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 501
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo%5Cbar\">link</a></p>"
Received: "<p>[link](foo\\bar)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 502
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo%20b%C3%A4\">link</a></p>"
Received: "<p>[link](foo%20b&amp;auml;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 503
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"%22title%22\">link</a></p>"
Received: "<p>[link](&quot;title&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 504
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">link</a> <a href=\"/url\" title=\"title\">link</a> <a href=\"/url\" title=\"title\">link</a></p>"
Received: "<p>[link](/url &quot;title&quot;) [link](/url 'title') [link](/url (title))</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 505
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title &quot;&quot;\">link</a></p>"
Received: "<p>[link](/url &quot;title \\&quot;&amp;quot;&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 506
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url%C2%A0%22title%22\">link</a></p>"
Received: "<p>[link](/url &quot;title&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 507
(pass) CommonMark Spec Test Suite > Links > Example 508
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title &quot;and&quot; title\">link</a></p>"
Received: "<p>[link](/url 'title &quot;and&quot; title')</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 509
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\" title=\"title\">link</a></p>"
Received: "<p>[link]( /uri &quot;title&quot; )</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 510
(pass) CommonMark Spec Test Suite > Links > Example 511
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link [foo [bar]]</a></p>"
Received: "<p>[link [foo [bar]]](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 512
(pass) CommonMark Spec Test Suite > Links > Example 513
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[link <a href=\"/uri\">bar</a></p>"
Received: "<p>[link [bar](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 514
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link [bar</a></p>"
Received: "<p>[link [bar](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 515 [0.59ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>"
Received: "<p>[link <em>foo </em><em>bar</em><em> <code class=\"inline\">#</code></em>](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 516 [0.04ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>"
Received: "<p>[![moon](moon.jpg)](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 517
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo <a href=\"/uri\">bar</a>](/uri)</p>"
Received: "<p>[foo [bar](/uri)](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 518
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo <em>[bar <a href=\"/uri\">baz</a>](/uri)</em>](/uri)</p>"
Received: "<p>[foo <em>[bar [baz](/uri)](/uri)</em>](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 519
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"uri3\" alt=\"[foo](uri2)\" /></p>"
Received: "<p>![[[foo](uri1)](uri2)](uri3)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 520
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<a href=\"/uri\">foo*</a></p>"
Received: "<p><em>[foo</em>](/uri)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 521
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"baz*\">foo *bar</a></p>"
Received: "<p>[foo <em>bar](baz</em>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 522
(pass) CommonMark Spec Test Suite > Links > Example 523
(pass) CommonMark Spec Test Suite > Links > Example 524
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo<code>](/uri)</code></p>"
Received: "<p>[foo<code class=\"inline\">](/uri)</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 525
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo<a href=\"https://example.com/?search=%5D(uri)\">https://example.com/?search=](uri)</a></p>"
Received: "<p>[foo<a href=\"https://example.com/?search=](uri)\">https://example.com/?search=](uri)</a></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 526
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>[foo][bar]</p> <p>[bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 527
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link [foo [bar]]</a></p>"
Received: "<p>[link [foo [bar]]][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 528
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link [bar</a></p>"
Received: "<p>[link [bar][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 529
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">link <em>foo <strong>bar</strong> <code>#</code></em></a></p>"
Received: "<p>[link <em>foo </em><em>bar</em><em> <code class=\"inline\">#</code></em>][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 530
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\"><img src=\"moon.jpg\" alt=\"moon\" /></a></p>"
Received: "<p>[![moon](moon.jpg)][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 531
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo <a href=\"/uri\">bar</a>]<a href=\"/uri\">ref</a></p>"
Received: "<p>[foo [bar](/uri)][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 532
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo <em>bar <a href=\"/uri\">baz</a></em>]<a href=\"/uri\">ref</a></p>"
Received: "<p>[foo <em>bar [baz][ref]</em>][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 533
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<a href=\"/uri\">foo*</a></p>"
Received: "<p><em>[foo</em>][ref]</p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 534
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">foo *bar</a>*</p>"
Received: "<p>[foo <em>bar][ref]</em></p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 535 [0.03ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo <bar attr=\"][ref]\"></p>"
Received: "<p>[foo <bar attr=\"][ref]\"></p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 536 [0.01ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo<code>][ref]</code></p>"
Received: "<p>[foo<code class=\"inline\">][ref]</code></p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 537
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo<a href=\"https://example.com/?search=%5D%5Bref%5D\">https://example.com/?search=][ref]</a></p>"
Received: "<p>[foo<a href=\"https://example.com/?search=][ref]\">https://example.com/?search=][ref]</a></p> <p>[ref]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 538
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>[foo][BaR]</p> <p>[bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 539
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">ẞ</a></p>"
Received: "<p>[ẞ]</p> <p>[SS]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 540
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">Baz</a></p>"
Received: "<p>[Foo bar]: /url</p> <p>[Baz][Foo bar]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 541
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>"
Received: "<p>[foo] [bar]</p> <p>[bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 542
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo] <a href=\"/url\" title=\"title\">bar</a></p>"
Received: "<p>[foo] [bar]</p> <p>[bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 543
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url1\">bar</a></p>"
Received: "<p>[foo]: /url1</p> <p>[foo]: /url2</p> <p>[bar][foo]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 544
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[bar][foo!]</p>"
Received: "<p>[bar][foo!]</p> <p>[foo!]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 545
(pass) CommonMark Spec Test Suite > Links > Example 546 [0.03ms]
(pass) CommonMark Spec Test Suite > Links > Example 547
(pass) CommonMark Spec Test Suite > Links > Example 548
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">foo</a></p>"
Received: "<p>[foo][ref[]</p> <p>[ref[]: /uri</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 549 [0.04ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/uri\">bar\\</a></p>"
Received: "<p>[bar\\]: /uri</p> <p>[bar\\]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 550 [0.03ms]
(pass) CommonMark Spec Test Suite > Links > Example 551
(pass) CommonMark Spec Test Suite > Links > Example 552
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>[foo][]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 553
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>"
Received: "<p>[<em>foo</em> bar][]</p> <p>[<em>foo</em> bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 554
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">Foo</a></p>"
Received: "<p>[Foo][]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 555
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a> []</p>"
Received: "<p>[foo] []</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 556 [0.19ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>[foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 557 [0.03ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\"><em>foo</em> bar</a></p>"
Received: "<p>[<em>foo</em> bar]</p> <p>[<em>foo</em> bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 558
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[<a href=\"/url\" title=\"title\"><em>foo</em> bar</a>]</p>"
Received: "<p>[[<em>foo</em> bar]]</p> <p>[<em>foo</em> bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 559
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[[bar <a href=\"/url\">foo</a></p>"
Received: "<p>[[bar [foo]</p> <p>[foo]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 560
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\" title=\"title\">Foo</a></p>"
Received: "<p>[Foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 561
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url\">foo</a> bar</p>"
Received: "<p>[foo] bar</p> <p>[foo]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 562
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo]</p>"
Received: "<p>[foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 563
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>*<a href=\"/url\">foo*</a></p>"
Received: "<p>[foo*]: /url</p> <p><em>[foo</em>]</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 564
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url2\">foo</a></p>"
Received: "<p>[foo][bar]</p> <p>[foo]: /url1 [bar]: /url2</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 565
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url1\">foo</a></p>"
Received: "<p>[foo][]</p> <p>[foo]: /url1</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 566
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"\">foo</a></p>"
Received: "<p>[foo]()</p> <p>[foo]: /url1</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 567
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url1\">foo</a>(not a link)</p>"
Received: "<p>[foo](not a link)</p> <p>[foo]: /url1</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 568
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo]<a href=\"/url\">bar</a></p>"
Received: "<p>[foo][bar][baz]</p> <p>[baz]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 569
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"/url2\">foo</a><a href=\"/url1\">baz</a></p>"
Received: "<p>[foo][bar][baz]</p> <p>[baz]: /url1 [bar]: /url2</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 570
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>[foo]<a href=\"/url1\">bar</a></p>"
Received: "<p>[foo][bar][baz]</p> <p>[baz]: /url1 [foo]: /url2</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Links > Example 571
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>"
Received: "<p>![foo](/url &quot;title&quot;)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 572
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>"
Received: "<p>![foo <em>bar</em>]</p> <p>[foo <em>bar</em>]: train.jpg &quot;train &amp; tracks&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 573
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url2\" alt=\"foo bar\" /></p>"
Received: "<p>![foo ![bar](/url)](/url2)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 574
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url2\" alt=\"foo bar\" /></p>"
Received: "<p>![foo [bar](/url)](/url2)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 575
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>"
Received: "<p>![foo <em>bar</em>][]</p> <p>[foo <em>bar</em>]: train.jpg &quot;train &amp; tracks&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 576
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"train.jpg\" alt=\"foo bar\" title=\"train &amp; tracks\" /></p>"
Received: "<p>![foo <em>bar</em>][foobar]</p> <p>[FOOBAR]: train.jpg &quot;train &amp; tracks&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 577
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"train.jpg\" alt=\"foo\" /></p>"
Received: "<p>![foo](train.jpg)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 578
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>My <img src=\"/path/to/train.jpg\" alt=\"foo bar\" title=\"title\" /></p>"
Received: "<p>My ![foo bar](/path/to/train.jpg &quot;title&quot; )</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 579
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"url\" alt=\"foo\" /></p>"
Received: "<p>![foo](<url>)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 580
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"\" /></p>"
Received: "<p>![](/url)</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 581
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" /></p>"
Received: "<p>![foo][bar]</p> <p>[bar]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 582
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" /></p>"
Received: "<p>![foo][bar]</p> <p>[BAR]: /url</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 583
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>"
Received: "<p>![foo][]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 584
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>"
Received: "<p>![<em>foo</em> bar][]</p> <p>[<em>foo</em> bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 585
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>"
Received: "<p>![Foo][]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 586
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /> []</p>"
Received: "<p>![foo] []</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 587
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo\" title=\"title\" /></p>"
Received: "<p>![foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 588
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"foo bar\" title=\"title\" /></p>"
Received: "<p>![<em>foo</em> bar]</p> <p>[<em>foo</em> bar]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 589
(pass) CommonMark Spec Test Suite > Images > Example 590
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><img src=\"/url\" alt=\"Foo\" title=\"title\" /></p>"
Received: "<p>![Foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 591
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>![foo]</p>"
Received: "<p>![foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 592
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>!<a href=\"/url\" title=\"title\">foo</a></p>"
Received: "<p>![foo]</p> <p>[foo]: /url &quot;title&quot;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Images > Example 593
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"http://foo.bar.baz\">http://foo.bar.baz</a></p>"
Received: "<http://foo.bar.baz>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 594
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean\">https://foo.bar.baz/test?q=hello&amp;id=22&amp;boolean</a></p>"
Received: "<https://foo.bar.baz/test?q=hello&id=22&boolean>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 595
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"irc://foo.bar:2233/baz\">irc://foo.bar:2233/baz</a></p>"
Received: "<irc://foo.bar:2233/baz>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 596
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"MAILTO:FOO@BAR.BAZ\">MAILTO:FOO@BAR.BAZ</a></p>"
Received: "<MAILTO:FOO@BAR.BAZ>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 597
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"a+b+c:d\">a+b+c:d</a></p>"
Received: "<a+b+c:d>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 598
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"made-up-scheme://foo,bar\">made-up-scheme://foo,bar</a></p>"
Received: "<made-up-scheme://foo,bar>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 599
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"https://../\">https://../</a></p>"
Received: "<https://../>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 600
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"localhost:5001/foo\">localhost:5001/foo</a></p>"
Received: "<localhost:5001/foo>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 601
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;https://foo.bar/baz bim&gt;</p>"
Received: "<https://foo.bar/baz bim>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 602
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"https://example.com/%5C%5B%5C\">https://example.com/\\[\\</a></p>"
Received: "<https://example.com/\\[\\>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 603
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"mailto:foo@bar.example.com\">foo@bar.example.com</a></p>"
Received: "<foo@bar.example.com>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 604
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"mailto:foo+special@Bar.baz-bar0.com\">foo+special@Bar.baz-bar0.com</a></p>"
Received: "<foo+special@Bar.baz-bar0.com>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 605
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;foo+@bar.example.com&gt;</p>"
Received: "<foo\\+@bar.example.com>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 606
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;&gt;</p>"
Received: "<>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 607
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt; https://foo.bar &gt;</p>"
Received: "< https://foo.bar >"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 608
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;m:abc&gt;</p>"
Received: "<m:abc>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 609
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;foo.bar.baz&gt;</p>"
Received: "<foo.bar.baz>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Autolinks > Example 610
(pass) CommonMark Spec Test Suite > Autolinks > Example 611
(pass) CommonMark Spec Test Suite > Autolinks > Example 612
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a><bab><c2c></p>"
Received: "<a><bab><c2c>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 613
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a/><b2/></p>"
Received: "<a/><b2/>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 614
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a /><b2 data=\"foo\" ></p>"
Received: "<a /><b2 <p>data=&quot;foo&quot; &gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 615 [1.95ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a foo=\"bar\" bam = 'baz <em>\"</em>' _boolean zoop:33=zoop:33 /></p>"
Received: "<a foo=\"bar\" bam = 'baz <em>\"</em>' <p>_boolean zoop:33=zoop:33 /&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 616
(pass) CommonMark Spec Test Suite > Raw HTML > Example 617
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;33&gt; &lt;__&gt;</p>"
Received: "<33> <__>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 618
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;a h*#ref=&quot;hi&quot;&gt;</p>"
Received: "<a h*#ref=\"hi\">"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 619
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;a href=&quot;hi'&gt; &lt;a href=hi'&gt;</p>"
Received: "<a href=\"hi'> <a href=hi'>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 620
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt; a&gt;&lt; foo&gt;&lt;bar/ &gt; &lt;foo bar=baz bim!bop /&gt;</p>"
Received: "< a>< <p>foo&gt;<bar/ ></p> <foo bar=baz <p>bim!bop /&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 621
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;a href='bar'title=title&gt;</p>"
Received: "<a href='bar'title=title>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 622
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p></a></foo ></p>"
Received: "</a></foo >"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 623
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;/a href=&quot;foo&quot;&gt;</p>"
Received: "</a href=\"foo\">"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 624
(pass) CommonMark Spec Test Suite > Raw HTML > Example 625
(pass) CommonMark Spec Test Suite > Raw HTML > Example 626
(pass) CommonMark Spec Test Suite > Raw HTML > Example 627
(pass) CommonMark Spec Test Suite > Raw HTML > Example 628
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo <![CDATA[>&<]]></p>"
Received: "<p>foo <![CDATA[>&amp;<]]></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 629 [0.29ms]
(pass) CommonMark Spec Test Suite > Raw HTML > Example 630
(pass) CommonMark Spec Test Suite > Raw HTML > Example 631
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>&lt;a href=&quot;&quot;&quot;&gt;</p>"
Received: "<a href=\"\\\"\">"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Raw HTML > Example 632 [0.03ms]
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> baz</p>"
Received: "<p>foo baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 633
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> baz</p>"
Received: "<p>foo\\ baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 634
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> baz</p>"
Received: "<p>foo baz</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 635
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> bar</p>"
Received: "<p>foo </p> <pre><code> bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 636
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo<br /> bar</p>"
Received: "<p>foo\\</p> <pre><code> bar</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 637
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo<br /> bar</em></p>"
Received: "<p><em>foo bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 638
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><em>foo<br /> bar</em></p>"
Received: "<p><em>foo\\ bar</em></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 639
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>code span</code></p>"
Received: "<p><code class=\"inline\">code span</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 640
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><code>code\\ span</code></p>"
Received: "<p><code class=\"inline\">code\\ span</code></p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 641
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo bar\"></p>"
Received: "<a href=\"foo <p>bar&quot;&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 642
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p><a href=\"foo\\ bar\"></p>"
Received: "<a href=\"foo\\ <p>bar&quot;&gt;</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 643 [0.28ms]
(pass) CommonMark Spec Test Suite > Hard line breaks > Example 644
36 |             for (const testCase of tests) {
37 |                 test(`Example ${testCase.example}`, () => {
38 |                     const actualOutput = parseMarkdown(testCase.markdown);
39 |                     const normalizedActual = normalizeHtml(actualOutput);
40 |                     const normalizedExpected = normalizeHtml(testCase.html);
41 |                     expect(normalizedActual).toBe(normalizedExpected);
                                                  ^
error: expect(received).toBe(expected)

Expected: "<p>foo</p>"
Received: "<p>foo </p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/common-mark-0-31-2-spec.test.ts:41:46)
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 645 [0.02ms]
(pass) CommonMark Spec Test Suite > Hard line breaks > Example 646
(pass) CommonMark Spec Test Suite > Hard line breaks > Example 647
(pass) CommonMark Spec Test Suite > Soft line breaks > Example 648
(pass) CommonMark Spec Test Suite > Soft line breaks > Example 649
(pass) CommonMark Spec Test Suite > Textual content > Example 650
(pass) CommonMark Spec Test Suite > Textual content > Example 651
(pass) CommonMark Spec Test Suite > Textual content > Example 652 [0.03ms]

md-parser-test-suits/editor-reference-file-1.test.ts:
(pass) editor-reference-file tests > Should parse the top-level heading correctly [0.33ms]
(pass) editor-reference-file tests > Should parse sub-headings (e.g. '## Overview') correctly
(pass) editor-reference-file tests > Should parse emphasized text in the reference file
47 |             "* Green",
48 |             "* Blue"
49 |         ].join("\n")
50 |         const output = parseMarkdown(listLines)
51 |         // Each line gets its own <ul> in parseMarkdown’s logic
52 |         expect(output).toContain("<ul><li>Red</li></ul>")
                            ^
error: expect(received).toContain(expected)

Expected to contain: "<ul><li>Red</li></ul>"
Received: "<ul>\n<li><p>Red</p></li><li><p>Green</p></li><li><p>Blue</p></li>\n</ul>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-1.test.ts:52:24)
(fail) editor-reference-file tests > Should parse a bullet list from the reference file [0.38ms]
(pass) editor-reference-file tests > Should parse an ordered list from the reference file
69 |     })
70 | 
71 |     test("Should parse code blocks from the reference file", () => {
72 |         const codeBlock = "```\ntell application \"Foo\"\n    beep\nend tell\n```"
73 |         const output = parseMarkdown(codeBlock)
74 |         expect(output).toContain("<pre><code>tell application \"Foo\"\n    beep\nend tell</code></pre>")
                            ^
error: expect(received).toContain(expected)

Expected to contain: "<pre><code>tell application \"Foo\"\n    beep\nend tell</code></pre>"
Received: "<pre><code>tell application &quot;Foo&quot;\n    beep\nend tell</code></pre>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-1.test.ts:74:24)
(fail) editor-reference-file tests > Should parse code blocks from the reference file
(pass) editor-reference-file tests > Should parse blockquotes from the reference file [0.12ms]
89 |     })
90 | 
91 |     test("Should parse inline links properly", () => {
92 |         const linkLine = "[This link](http://example.net/) has no title attribute."
93 |         const output = parseMarkdown(linkLine)
94 |         expect(output).toContain("<a href=\"http://example.net/\">This link</a>")
                            ^
error: expect(received).toContain(expected)

Expected to contain: "<a href=\"http://example.net/\">This link</a>"
Received: "<p>[This link](http://example.net/) has no title attribute.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-1.test.ts:94:24)
(fail) editor-reference-file tests > Should parse inline links properly
 97 |     test("Should parse the entire editor-reference-file.md without errors", () => {
 98 |         const output = parseMarkdown(entireMarkdown)
 99 |         expect(output).toContain("<h1>Markdown: Syntax</h1>")
100 |         expect(output).toContain("Block Elements")
101 |         expect(output).toContain("Span Elements")
102 |         expect(output).toContain("## Overview")
                             ^
error: expect(received).toContain(expected)

Expected to contain: "## Overview"
Received: "<h1>Markdown: Syntax</h1>\n<ul>\n<li><p>[Overview](#overview)</p></li><li><p>[Philosophy](#philosophy)</p></li><li><p>[Inline HTML](#html)</p></li><li><p>[Automatic Escaping for Special Characters](#autoescape)</p></li><li><p>[Block Elements](#block)</p></li><li><p>[Paragraphs and Line Breaks](#p)</p></li><li><p>[Headers](#header)</p></li><li><p>[Blockquotes](#blockquote)</p></li><li><p>[Lists](#list)</p></li><li><p>[Code Blocks](#precode)</p></li><li><p>[Horizontal Rules](#hr)</p></li><li><p>[Span Elements](#span)</p></li><li><p>[Links](#link)</p></li><li><p>[Emphasis](#em)</p></li><li><p>[Code](#code)</p></li><li><p>[Images](#img)</p></li><li><p>[Miscellaneous](#misc)</p></li><li><p>[Backslash Escapes](#backslash)</p></li><li><p>[Automatic Links](#autolink)</p></li>\n</ul>\n<p><strong>Note:</strong> This document is itself written using Markdown; you can [see the source for it by adding '.text' to the URL](/projects/markdown/syntax.text).</p>\n<p>----</p>\n<h2>Overview</h2>\n<h3>Philosophy</h3>\n<p>Markdown is intended to be as easy-to-read and easy-to-write as is feasible.</p>\n<p>Readability, however, is emphasized above all else. A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. While Markdown's syntax has been influenced by several existing text-to-HTML filters -- including [Setext](http://docutils.sourceforge.net/mirror/setext.html), [atx](http://www.aaronsw.com/2002/atx/), [Textile](http://textism.com/tools/textile/), [reStructuredText](http://docutils.sourceforge.net/rst.html), [Grutatext](http://www.triptico.com/software/grutatxt.html), and [EtText](http://ettext.taint.org/doc/) -- the single biggest source of inspiration for Markdown's syntax is the format of plain text email.</p>\n<h2>Block Elements</h2>\n<h3>Paragraphs and Line Breaks</h3>\n<p>A paragraph is simply one or more consecutive lines of text, separated by one or more blank lines. (A blank line is any line that looks like a blank line -- a line containing nothing but spaces or tabs is considered blank.) Normal paragraphs should not be indented with spaces or tabs.</p>\n<p>The implication of the &quot;one or more consecutive lines of text&quot; rule is that Markdown supports &quot;hard-wrapped&quot; text paragraphs. This differs significantly from most other text-to-HTML formatters (including Movable Type's &quot;Convert Line Breaks&quot; option) which translate every line break character in a paragraph into a <code class=\"inline\">&lt;br /&gt;</code> tag.</p>\n<p>When you <em>do</em> want to insert a <code class=\"inline\">&lt;br /&gt;</code> break tag using Markdown, you end a line with two or more spaces, then type return.</p>\n<h3>Headers</h3>\n<p>Markdown supports two styles of headers, [Setext] [1] and [atx] [2].</p>\n<p>Optionally, you may &quot;close&quot; atx-style headers. This is purely cosmetic -- you can use this if you think it looks better. The closing hashes don't even need to match the number of hashes used to open the header. (The number of opening hashes determines the header level.)</p>\n<h3>Blockquotes</h3>\n<p>Markdown uses email-style <code class=\"inline\">&gt;</code> characters for blockquoting. If you're familiar with quoting passages of text in an email message, then you know how to create a blockquote in Markdown. It looks best if you hard wrap the text and put a <code class=\"inline\">&gt;</code> before every line:</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n</blockquote>\n<p>Markdown allows you to be lazy and only put the <code class=\"inline\">&gt;</code> before the first line of a hard-wrapped paragraph:</p>\n<blockquote>\n<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</p>\n</blockquote>\n<p>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<blockquote>\n<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</p>\n</blockquote>\n<p>id sem consectetuer libero luctus adipiscing.</p>\n<p>Blockquotes can be nested (i.e. a blockquote-in-a-blockquote) by adding additional levels of <code class=\"inline\">&gt;</code>:</p>\n<blockquote>\n<p>This is the first level of quoting.</p>\n<blockquote>\n<p>This is nested blockquote.</p>\n</blockquote>\n<p>Back to the first level.</p>\n</blockquote>\n<p>Blockquotes can contain other Markdown elements, including headers, lists, and code blocks:</p>\n<blockquote>\n<h2>This is a header</h2>\n<ol>\n<li><p>This is the first list item.</p></li><li><p>This is the second list item.</p></li>\n</ol>\n<p>Here's some example code:</p>\n<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre>\n</blockquote>\n<p>Any decent text editor should make email-style quoting easy. For example, with BBEdit, you can make a selection and choose Increase Quote Level from the Text menu.</p>\n<h3>Lists</h3>\n<p>Markdown supports ordered (numbered) and unordered (bulleted) lists.</p>\n<p>Unordered lists use asterisks, pluses, and hyphens -- interchangably -- as list markers:</p>\n<ul>\n<li><p>Red</p></li><li><p>Green</p></li><li><p>Blue</p></li>\n</ul>\n<p>is equivalent to:</p>\n<ul>\n<li><p>Red</p></li><li><p>Green</p></li><li><p>Blue</p></li>\n</ul>\n<p>and:</p>\n<ul>\n<li><p>Red</p></li><li><p>Green</p></li><li><p>Blue</p></li>\n</ul>\n<p>Ordered lists use numbers followed by periods:</p>\n<ol>\n<li><p>Bird</p></li><li><p>McHale</p></li><li><p>Parish</p></li>\n</ol>\n<p>It's important to note that the actual numbers you use to mark the list have no effect on the HTML output Markdown produces. The HTML Markdown produces from the above list is:</p>\n<p>If you instead wrote the list in Markdown like this:</p>\n<ol>\n<li><p>Bird</p></li><li><p>McHale</p></li><li><p>Parish</p></li>\n</ol>\n<p>or even:</p>\n<ol>\n<li><p>Bird</p></li><li><p>McHale</p></li><li><p>Parish</p></li>\n</ol>\n<p>you'd get the exact same HTML output. The point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don't have to.</p>\n<p>To make lists look nice, you can wrap items with hanging indents:</p>\n<ul>\n<li><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p></li>\n</ul>\n<pre><code>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,\nviverra nec, fringilla in, laoreet vitae, risus.</code></pre>\n<ul>\n<li><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</p></li>\n</ul>\n<pre><code>Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre>\n<p>But if you want to be lazy, you don't have to:</p>\n<ul>\n<li><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p></li>\n</ul>\n<p>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>\n<ul>\n<li><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</p></li>\n</ul>\n<p>Suspendisse id sem consectetuer libero luctus adipiscing.</p>\n<p>List items may consist of multiple paragraphs. Each subsequent paragraph in a list item must be indented by either 4 spaces or one tab:</p>\n<ol>\n<li><p>This is a list item with two paragraphs. Lorem ipsum dolor</p></li>\n</ol>\n<pre><code>sit amet, consectetuer adipiscing elit. Aliquam hendrerit\nmi posuere lectus.</code></pre>\n<pre><code>Vestibulum enim wisi, viverra nec, fringilla in, laoreet\nvitae, risus. Donec sit amet nisl. Aliquam semper ipsum\nsit amet velit.</code></pre>\n<ol>\n<li><p>Suspendisse id sem consectetuer libero luctus adipiscing.</p></li>\n</ol>\n<p>It looks nice if you indent every line of the subsequent paragraphs, but here again, Markdown will allow you to be lazy:</p>\n<ul>\n<li><p>This is a list item with two paragraphs.</p></li>\n</ul>\n<pre><code>This is the second paragraph in the list item. You're</code></pre>\n<p>only required to indent the first line. Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</p>\n<ul>\n<li><p>Another item in the same list.</p></li>\n</ul>\n<p>To put a blockquote within a list item, the blockquote's <code class=\"inline\">&gt;</code> delimiters need to be indented:</p>\n<ul>\n<li><p>A list item with a blockquote:</p></li>\n</ul>\n<blockquote>\n<p>This is a blockquote inside a list item.</p>\n</blockquote>\n<p>To put a code block within a list item, the code block needs to be indented <em>twice</em> -- 8 spaces or two tabs:</p>\n<ul>\n<li><p>A list item with a code block:</p></li>\n</ul>\n<pre><code>    &lt;code goes here&gt;</code></pre>\n<h3>Code Blocks</h3>\n<p>Pre-formatted code blocks are used for writing about programming or markup source code. Rather than forming normal paragraphs, the lines of a code block are interpreted literally. Markdown wraps a code block in both <code class=\"inline\">&lt;pre&gt;</code> and <code class=\"inline\">&lt;code&gt;</code> tags.</p>\n<p>To produce a code block in Markdown, simply indent every line of the block by at least 4 spaces or 1 tab.</p>\n<p>This is a normal paragraph:</p>\n<pre><code>This is a code block.</code></pre>\n<p>Here is an example of AppleScript:</p>\n<pre><code>tell application &quot;Foo&quot;\n    beep\nend tell</code></pre>\n<p>A code block continues until it reaches a line that is not indented (or the end of the article).</p>\n<p>Within a code block, ampersands (<code class=\"inline\">&amp;</code>) and angle brackets (<code class=\"inline\">&lt;</code> and <code class=\"inline\">&gt;</code>) are automatically converted into HTML entities. This makes it very easy to include example HTML source code using Markdown -- just paste it and indent it, and Markdown will handle the hassle of encoding the ampersands and angle brackets. For example, this:</p>\n<pre><code>&lt;div class=&quot;footer&quot;&gt;\n    &amp;copy; 2004 Foo Corporation\n&lt;/div&gt;</code></pre>\n<p>Regular Markdown syntax is not processed within code blocks. E.g., asterisks are just literal asterisks within a code block. This means it's also easy to use Markdown to write about Markdown's own syntax.</p>\n<pre><code>tell application &quot;Foo&quot;\n    beep\nend tell</code></pre>\n<h2>Span Elements</h2>\n<h3>Links</h3>\n<p>Markdown supports two style of links: <em>inline</em> and <em>reference</em>.</p>\n<p>In both styles, the link text is delimited by [square brackets].</p>\n<p>To create an inline link, use a set of regular parentheses immediately after the link text's closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an <em>optional</em> title for the link, surrounded in quotes. For example:</p>\n<p>This is [an example](http://example.com/) inline link.</p>\n<p>[This link](http://example.net/) has no title attribute.</p>\n<h3>Emphasis</h3>\n<p>Markdown treats asterisks (<code class=\"inline\">*</code>) and underscores (<code class=\"inline\">_</code>) as indicators of emphasis. Text wrapped with one <code class=\"inline\">*</code> or <code class=\"inline\">_</code> will be wrapped with an HTML <code class=\"inline\">&lt;em&gt;</code> tag; double <code class=\"inline\">*</code>'s or <code class=\"inline\">_</code>'s will be wrapped with an HTML <code class=\"inline\">&lt;strong&gt;</code> tag. E.g., this input:</p>\n<p><em>single asterisks</em></p>\n<p><em>single underscores</em></p>\n<p><strong>double asterisks</strong></p>\n<p><strong>double underscores</strong></p>\n<h3>Code</h3>\n<p>To indicate a span of code, wrap it with backtick quotes (<code class=\"inline\"></code> <code class=\"inline\"> </code>`). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p>\n<p>Use the <code class=\"inline\">printf()</code> function.</p>"

      at <anonymous> (/Users/brandon/Programming/notey-notey/md-parser-test-suits/editor-reference-file-1.test.ts:102:24)
(fail) editor-reference-file tests > Should parse the entire editor-reference-file.md without errors [1.07ms]

538 tests failed:
(fail) Edge Case Tests for parseMarkdown > Escapes HTML special characters and wraps in paragraph [0.82ms]
(fail) Edge Case Tests for parseMarkdown > Converts code blocks
(fail) Edge Case Tests for parseMarkdown > Converts math display checkbox with lowercase x [0.23ms]
(fail) Edge Case Tests for parseMarkdown > Converts math display checkbox with uppercase X [0.11ms]
(fail) Edge Case Tests for parseMarkdown > Converts bullet lists [0.08ms]
(fail) Edge Case Tests for parseMarkdown > Converts headers [0.14ms]
(fail) Blurring from a line sets active line to null
(fail) applyFormatToActiveLine bolds the active line
(fail) insertLinkAtActiveLine adds a link to the active line
(fail) insertListItemAtActiveLine adds a list item to the active line
(fail) Clicking copy button copies content
(fail) Clicking save button calls fetch
(fail) applyFormatToActiveLine correctly inserts checkbox
(fail) applyFormatToActiveLine correctly inserts code block
(fail) editor-reference-file-2 tests > Should parse emphasis correctly
(fail) editor-reference-file-2 tests > Should parse unordered lists correctly
(fail) editor-reference-file-2 tests > Should parse ordered lists correctly
(fail) editor-reference-file-2 tests > Should parse task lists correctly
(fail) editor-reference-file-2 tests > Should parse inline code correctly
(fail) editor-reference-file-2 tests > Should parse fenced code blocks correctly [1.09ms]
(fail) editor-reference-file-2 tests > Should parse inline links correctly
(fail) editor-reference-file-2 tests > Should parse links with titles correctly
(fail) editor-reference-file-2 tests > Should parse automatic links correctly
(fail) editor-reference-file-2 tests > Should parse inline images correctly
(fail) editor-reference-file-2 tests > Should parse display math (LaTeX) correctly
(fail) editor-reference-file-2 tests > Should parse details and summary correctly [0.19ms]
(fail) editor-reference-file-2 tests > Should parse links to external references correctly
(fail) editor-reference-file-2 tests > Should parse the entire editor-reference-file-2.md without errors [0.23ms]
(fail) CommonMark Spec Test Suite > Tabs > Example 1 [0.94ms]
(fail) CommonMark Spec Test Suite > Tabs > Example 2
(fail) CommonMark Spec Test Suite > Tabs > Example 3
(fail) CommonMark Spec Test Suite > Tabs > Example 4
(fail) CommonMark Spec Test Suite > Tabs > Example 5
(fail) CommonMark Spec Test Suite > Tabs > Example 6
(fail) CommonMark Spec Test Suite > Tabs > Example 7
(fail) CommonMark Spec Test Suite > Tabs > Example 8
(fail) CommonMark Spec Test Suite > Tabs > Example 9 [0.46ms]
(fail) CommonMark Spec Test Suite > Tabs > Example 11
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 12
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 14
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 16
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 17 [0.32ms]
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 18
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 19
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 20
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 22
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 23
(fail) CommonMark Spec Test Suite > Backslash escapes > Example 24
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 25
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 26
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 27 [0.36ms]
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 32
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 33 [0.14ms]
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 34
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 35
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 36
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 37
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 38 [0.18ms]
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 39
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 40
(fail) CommonMark Spec Test Suite > Entity and numeric character references > Example 41 [0.11ms]
(fail) CommonMark Spec Test Suite > Precedence > Example 42 [0.01ms]
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 43
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 47
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 48
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 49
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 50
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 51 [0.17ms]
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 52
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 53
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 54 [0.10ms]
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 55
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 56
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 57 [0.12ms]
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 58 [0.02ms]
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 60
(fail) CommonMark Spec Test Suite > Thematic breaks > Example 61
(fail) CommonMark Spec Test Suite > ATX headings > Example 69
(fail) CommonMark Spec Test Suite > ATX headings > Example 70
(fail) CommonMark Spec Test Suite > ATX headings > Example 71
(fail) CommonMark Spec Test Suite > ATX headings > Example 72
(fail) CommonMark Spec Test Suite > ATX headings > Example 73
(fail) CommonMark Spec Test Suite > ATX headings > Example 77
(fail) CommonMark Spec Test Suite > ATX headings > Example 79
(fail) CommonMark Spec Test Suite > Setext headings > Example 81
(fail) CommonMark Spec Test Suite > Setext headings > Example 82
(fail) CommonMark Spec Test Suite > Setext headings > Example 83
(fail) CommonMark Spec Test Suite > Setext headings > Example 85
(fail) CommonMark Spec Test Suite > Setext headings > Example 87
(fail) CommonMark Spec Test Suite > Setext headings > Example 88
(fail) CommonMark Spec Test Suite > Setext headings > Example 92
(fail) CommonMark Spec Test Suite > Setext headings > Example 93
(fail) CommonMark Spec Test Suite > Setext headings > Example 94
(fail) CommonMark Spec Test Suite > Setext headings > Example 95
(fail) CommonMark Spec Test Suite > Setext headings > Example 96
(fail) CommonMark Spec Test Suite > Setext headings > Example 98
(fail) CommonMark Spec Test Suite > Setext headings > Example 99
(fail) CommonMark Spec Test Suite > Setext headings > Example 100
(fail) CommonMark Spec Test Suite > Setext headings > Example 101
(fail) CommonMark Spec Test Suite > Setext headings > Example 104
(fail) CommonMark Spec Test Suite > Setext headings > Example 105 [0.84ms]
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 107
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 108
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 109
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 110
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 111 [0.17ms]
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 112
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 113
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 114
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 115 [0.11ms]
(fail) CommonMark Spec Test Suite > Indented code blocks > Example 116
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 119
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 120
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 121
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 122
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 123
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 124
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 125
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 127
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 128
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 131
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 132
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 133 [0.41ms]
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 134 [0.02ms]
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 135
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 136
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 137
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 138
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 139
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 140
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 141
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 142
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 143
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 144
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 145
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 146
(fail) CommonMark Spec Test Suite > Fenced code blocks > Example 147
(fail) CommonMark Spec Test Suite > HTML blocks > Example 148
(fail) CommonMark Spec Test Suite > HTML blocks > Example 149
(fail) CommonMark Spec Test Suite > HTML blocks > Example 150
(fail) CommonMark Spec Test Suite > HTML blocks > Example 151
(fail) CommonMark Spec Test Suite > HTML blocks > Example 153
(fail) CommonMark Spec Test Suite > HTML blocks > Example 154
(fail) CommonMark Spec Test Suite > HTML blocks > Example 155
(fail) CommonMark Spec Test Suite > HTML blocks > Example 156
(fail) CommonMark Spec Test Suite > HTML blocks > Example 157
(fail) CommonMark Spec Test Suite > HTML blocks > Example 158
(fail) CommonMark Spec Test Suite > HTML blocks > Example 160
(fail) CommonMark Spec Test Suite > HTML blocks > Example 161
(fail) CommonMark Spec Test Suite > HTML blocks > Example 162
(fail) CommonMark Spec Test Suite > HTML blocks > Example 163
(fail) CommonMark Spec Test Suite > HTML blocks > Example 164
(fail) CommonMark Spec Test Suite > HTML blocks > Example 165
(fail) CommonMark Spec Test Suite > HTML blocks > Example 166
(fail) CommonMark Spec Test Suite > HTML blocks > Example 168
(fail) CommonMark Spec Test Suite > HTML blocks > Example 169
(fail) CommonMark Spec Test Suite > HTML blocks > Example 170
(fail) CommonMark Spec Test Suite > HTML blocks > Example 171
(fail) CommonMark Spec Test Suite > HTML blocks > Example 172
(fail) CommonMark Spec Test Suite > HTML blocks > Example 173
(fail) CommonMark Spec Test Suite > HTML blocks > Example 174
(fail) CommonMark Spec Test Suite > HTML blocks > Example 175
(fail) CommonMark Spec Test Suite > HTML blocks > Example 178 [1.35ms]
(fail) CommonMark Spec Test Suite > HTML blocks > Example 179
(fail) CommonMark Spec Test Suite > HTML blocks > Example 180
(fail) CommonMark Spec Test Suite > HTML blocks > Example 182 [0.17ms]
(fail) CommonMark Spec Test Suite > HTML blocks > Example 183
(fail) CommonMark Spec Test Suite > HTML blocks > Example 184
(fail) CommonMark Spec Test Suite > HTML blocks > Example 185 [0.10ms]
(fail) CommonMark Spec Test Suite > HTML blocks > Example 186
(fail) CommonMark Spec Test Suite > HTML blocks > Example 187
(fail) CommonMark Spec Test Suite > HTML blocks > Example 189
(fail) CommonMark Spec Test Suite > HTML blocks > Example 190
(fail) CommonMark Spec Test Suite > HTML blocks > Example 191
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 192
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 193
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 194
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 195 [0.34ms]
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 196
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 198 [0.11ms]
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 200 [0.05ms]
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 202
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 203
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 204
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 205
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 206
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 207
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 208
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 210
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 211
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 212
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 214
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 215
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 216
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 217
(fail) CommonMark Spec Test Suite > Link reference definitions > Example 218
(fail) CommonMark Spec Test Suite > Paragraphs > Example 222
(fail) CommonMark Spec Test Suite > Paragraphs > Example 223
(fail) CommonMark Spec Test Suite > Paragraphs > Example 224
(fail) CommonMark Spec Test Suite > Paragraphs > Example 225
(fail) CommonMark Spec Test Suite > Paragraphs > Example 226
(fail) CommonMark Spec Test Suite > Block quotes > Example 231
(fail) CommonMark Spec Test Suite > Block quotes > Example 232
(fail) CommonMark Spec Test Suite > Block quotes > Example 233
(fail) CommonMark Spec Test Suite > Block quotes > Example 234
(fail) CommonMark Spec Test Suite > Block quotes > Example 235
(fail) CommonMark Spec Test Suite > Block quotes > Example 236
(fail) CommonMark Spec Test Suite > Block quotes > Example 238
(fail) CommonMark Spec Test Suite > Block quotes > Example 246 [0.02ms]
(fail) CommonMark Spec Test Suite > Block quotes > Example 247
(fail) CommonMark Spec Test Suite > Block quotes > Example 250
(fail) CommonMark Spec Test Suite > Block quotes > Example 251
(fail) CommonMark Spec Test Suite > Block quotes > Example 252
(fail) CommonMark Spec Test Suite > List items > Example 253
(fail) CommonMark Spec Test Suite > List items > Example 254
(fail) CommonMark Spec Test Suite > List items > Example 255
(fail) CommonMark Spec Test Suite > List items > Example 256
(fail) CommonMark Spec Test Suite > List items > Example 257
(fail) CommonMark Spec Test Suite > List items > Example 258 [0.37ms]
(fail) CommonMark Spec Test Suite > List items > Example 259
(fail) CommonMark Spec Test Suite > List items > Example 260
(fail) CommonMark Spec Test Suite > List items > Example 262
(fail) CommonMark Spec Test Suite > List items > Example 263
(fail) CommonMark Spec Test Suite > List items > Example 264
(fail) CommonMark Spec Test Suite > List items > Example 265
(fail) CommonMark Spec Test Suite > List items > Example 266
(fail) CommonMark Spec Test Suite > List items > Example 267
(fail) CommonMark Spec Test Suite > List items > Example 268 [0.33ms]
(fail) CommonMark Spec Test Suite > List items > Example 270
(fail) CommonMark Spec Test Suite > List items > Example 271
(fail) CommonMark Spec Test Suite > List items > Example 272
(fail) CommonMark Spec Test Suite > List items > Example 273
(fail) CommonMark Spec Test Suite > List items > Example 274
(fail) CommonMark Spec Test Suite > List items > Example 275
(fail) CommonMark Spec Test Suite > List items > Example 276
(fail) CommonMark Spec Test Suite > List items > Example 277
(fail) CommonMark Spec Test Suite > List items > Example 278
(fail) CommonMark Spec Test Suite > List items > Example 279
(fail) CommonMark Spec Test Suite > List items > Example 280
(fail) CommonMark Spec Test Suite > List items > Example 281
(fail) CommonMark Spec Test Suite > List items > Example 282
(fail) CommonMark Spec Test Suite > List items > Example 283
(fail) CommonMark Spec Test Suite > List items > Example 284
(fail) CommonMark Spec Test Suite > List items > Example 286
(fail) CommonMark Spec Test Suite > List items > Example 287
(fail) CommonMark Spec Test Suite > List items > Example 288
(fail) CommonMark Spec Test Suite > List items > Example 289
(fail) CommonMark Spec Test Suite > List items > Example 290
(fail) CommonMark Spec Test Suite > List items > Example 291
(fail) CommonMark Spec Test Suite > List items > Example 292
(fail) CommonMark Spec Test Suite > List items > Example 293
(fail) CommonMark Spec Test Suite > List items > Example 294
(fail) CommonMark Spec Test Suite > List items > Example 295
(fail) CommonMark Spec Test Suite > List items > Example 296
(fail) CommonMark Spec Test Suite > List items > Example 297
(fail) CommonMark Spec Test Suite > List items > Example 298
(fail) CommonMark Spec Test Suite > List items > Example 299
(fail) CommonMark Spec Test Suite > List items > Example 300
(fail) CommonMark Spec Test Suite > Lists > Example 301 [0.04ms]
(fail) CommonMark Spec Test Suite > Lists > Example 302
(fail) CommonMark Spec Test Suite > Lists > Example 303 [0.06ms]
(fail) CommonMark Spec Test Suite > Lists > Example 304
(fail) CommonMark Spec Test Suite > Lists > Example 305
(fail) CommonMark Spec Test Suite > Lists > Example 306
(fail) CommonMark Spec Test Suite > Lists > Example 307
(fail) CommonMark Spec Test Suite > Lists > Example 308
(fail) CommonMark Spec Test Suite > Lists > Example 309
(fail) CommonMark Spec Test Suite > Lists > Example 310
(fail) CommonMark Spec Test Suite > Lists > Example 311
(fail) CommonMark Spec Test Suite > Lists > Example 312 [0.38ms]
(fail) CommonMark Spec Test Suite > Lists > Example 313
(fail) CommonMark Spec Test Suite > Lists > Example 314
(fail) CommonMark Spec Test Suite > Lists > Example 315 [0.14ms]
(fail) CommonMark Spec Test Suite > Lists > Example 316
(fail) CommonMark Spec Test Suite > Lists > Example 317
(fail) CommonMark Spec Test Suite > Lists > Example 318 [0.15ms]
(fail) CommonMark Spec Test Suite > Lists > Example 319 [0.04ms]
(fail) CommonMark Spec Test Suite > Lists > Example 320
(fail) CommonMark Spec Test Suite > Lists > Example 321 [0.06ms]
(fail) CommonMark Spec Test Suite > Lists > Example 322 [0.04ms]
(fail) CommonMark Spec Test Suite > Lists > Example 323
(fail) CommonMark Spec Test Suite > Lists > Example 324 [0.09ms]
(fail) CommonMark Spec Test Suite > Lists > Example 325
(fail) CommonMark Spec Test Suite > Lists > Example 326
(fail) CommonMark Spec Test Suite > Inlines > Example 327
(fail) CommonMark Spec Test Suite > Code spans > Example 328
(fail) CommonMark Spec Test Suite > Code spans > Example 329
(fail) CommonMark Spec Test Suite > Code spans > Example 330
(fail) CommonMark Spec Test Suite > Code spans > Example 331
(fail) CommonMark Spec Test Suite > Code spans > Example 332
(fail) CommonMark Spec Test Suite > Code spans > Example 333
(fail) CommonMark Spec Test Suite > Code spans > Example 334
(fail) CommonMark Spec Test Suite > Code spans > Example 335
(fail) CommonMark Spec Test Suite > Code spans > Example 336
(fail) CommonMark Spec Test Suite > Code spans > Example 337
(fail) CommonMark Spec Test Suite > Code spans > Example 338
(fail) CommonMark Spec Test Suite > Code spans > Example 339
(fail) CommonMark Spec Test Suite > Code spans > Example 340
(fail) CommonMark Spec Test Suite > Code spans > Example 341
(fail) CommonMark Spec Test Suite > Code spans > Example 342
(fail) CommonMark Spec Test Suite > Code spans > Example 343
(fail) CommonMark Spec Test Suite > Code spans > Example 344
(fail) CommonMark Spec Test Suite > Code spans > Example 345
(fail) CommonMark Spec Test Suite > Code spans > Example 346
(fail) CommonMark Spec Test Suite > Code spans > Example 347
(fail) CommonMark Spec Test Suite > Code spans > Example 349
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 351
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 352
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 353
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 354
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 358
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 359
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 360
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 361
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 362
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 363
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 366
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 367
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 368
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 369
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 371
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 372
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 373
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 374
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 375
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 376
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 379
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 380
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 383
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 384 [1.44ms]
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 385 [0.01ms]
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 386
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 387
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 388
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 389
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 391
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 392
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 393
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 397
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 398 [0.30ms]
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 399 [0.02ms]
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 400
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 401
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 402
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 404
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 406
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 407
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 408
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 409
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 410
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 411
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 412
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 413
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 414
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 415
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 416
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 417
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 418
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 419
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 421
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 422
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 425
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 426
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 427
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 431
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 432
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 433
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 435
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 437
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 439
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 440
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 444
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 445
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 449
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 451
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 452
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 456
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 457
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 464
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 465
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 466
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 467
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 468
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 470
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 471
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 472
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 473
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 474
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 475
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 476
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 477
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 478
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 479
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 480
(fail) CommonMark Spec Test Suite > Emphasis and strong emphasis > Example 481
(fail) CommonMark Spec Test Suite > Links > Example 482
(fail) CommonMark Spec Test Suite > Links > Example 483
(fail) CommonMark Spec Test Suite > Links > Example 484
(fail) CommonMark Spec Test Suite > Links > Example 485
(fail) CommonMark Spec Test Suite > Links > Example 486
(fail) CommonMark Spec Test Suite > Links > Example 487
(fail) CommonMark Spec Test Suite > Links > Example 489
(fail) CommonMark Spec Test Suite > Links > Example 492
(fail) CommonMark Spec Test Suite > Links > Example 493
(fail) CommonMark Spec Test Suite > Links > Example 494
(fail) CommonMark Spec Test Suite > Links > Example 495
(fail) CommonMark Spec Test Suite > Links > Example 496 [1.96ms]
(fail) CommonMark Spec Test Suite > Links > Example 498
(fail) CommonMark Spec Test Suite > Links > Example 499
(fail) CommonMark Spec Test Suite > Links > Example 500
(fail) CommonMark Spec Test Suite > Links > Example 501
(fail) CommonMark Spec Test Suite > Links > Example 502
(fail) CommonMark Spec Test Suite > Links > Example 503
(fail) CommonMark Spec Test Suite > Links > Example 504
(fail) CommonMark Spec Test Suite > Links > Example 505
(fail) CommonMark Spec Test Suite > Links > Example 506
(fail) CommonMark Spec Test Suite > Links > Example 507
(fail) CommonMark Spec Test Suite > Links > Example 509
(fail) CommonMark Spec Test Suite > Links > Example 510
(fail) CommonMark Spec Test Suite > Links > Example 512
(fail) CommonMark Spec Test Suite > Links > Example 514
(fail) CommonMark Spec Test Suite > Links > Example 515 [0.59ms]
(fail) CommonMark Spec Test Suite > Links > Example 516 [0.04ms]
(fail) CommonMark Spec Test Suite > Links > Example 517
(fail) CommonMark Spec Test Suite > Links > Example 518
(fail) CommonMark Spec Test Suite > Links > Example 519
(fail) CommonMark Spec Test Suite > Links > Example 520
(fail) CommonMark Spec Test Suite > Links > Example 521
(fail) CommonMark Spec Test Suite > Links > Example 522
(fail) CommonMark Spec Test Suite > Links > Example 525
(fail) CommonMark Spec Test Suite > Links > Example 526
(fail) CommonMark Spec Test Suite > Links > Example 527
(fail) CommonMark Spec Test Suite > Links > Example 528
(fail) CommonMark Spec Test Suite > Links > Example 529
(fail) CommonMark Spec Test Suite > Links > Example 530
(fail) CommonMark Spec Test Suite > Links > Example 531
(fail) CommonMark Spec Test Suite > Links > Example 532
(fail) CommonMark Spec Test Suite > Links > Example 533
(fail) CommonMark Spec Test Suite > Links > Example 534
(fail) CommonMark Spec Test Suite > Links > Example 535 [0.03ms]
(fail) CommonMark Spec Test Suite > Links > Example 536 [0.01ms]
(fail) CommonMark Spec Test Suite > Links > Example 537
(fail) CommonMark Spec Test Suite > Links > Example 538
(fail) CommonMark Spec Test Suite > Links > Example 539
(fail) CommonMark Spec Test Suite > Links > Example 540
(fail) CommonMark Spec Test Suite > Links > Example 541
(fail) CommonMark Spec Test Suite > Links > Example 542
(fail) CommonMark Spec Test Suite > Links > Example 543
(fail) CommonMark Spec Test Suite > Links > Example 544
(fail) CommonMark Spec Test Suite > Links > Example 545
(fail) CommonMark Spec Test Suite > Links > Example 549 [0.04ms]
(fail) CommonMark Spec Test Suite > Links > Example 550 [0.03ms]
(fail) CommonMark Spec Test Suite > Links > Example 553
(fail) CommonMark Spec Test Suite > Links > Example 554
(fail) CommonMark Spec Test Suite > Links > Example 555
(fail) CommonMark Spec Test Suite > Links > Example 556 [0.19ms]
(fail) CommonMark Spec Test Suite > Links > Example 557 [0.03ms]
(fail) CommonMark Spec Test Suite > Links > Example 558
(fail) CommonMark Spec Test Suite > Links > Example 559
(fail) CommonMark Spec Test Suite > Links > Example 560
(fail) CommonMark Spec Test Suite > Links > Example 561
(fail) CommonMark Spec Test Suite > Links > Example 562
(fail) CommonMark Spec Test Suite > Links > Example 563
(fail) CommonMark Spec Test Suite > Links > Example 564
(fail) CommonMark Spec Test Suite > Links > Example 565
(fail) CommonMark Spec Test Suite > Links > Example 566
(fail) CommonMark Spec Test Suite > Links > Example 567
(fail) CommonMark Spec Test Suite > Links > Example 568
(fail) CommonMark Spec Test Suite > Links > Example 569
(fail) CommonMark Spec Test Suite > Links > Example 570
(fail) CommonMark Spec Test Suite > Links > Example 571
(fail) CommonMark Spec Test Suite > Images > Example 572
(fail) CommonMark Spec Test Suite > Images > Example 573
(fail) CommonMark Spec Test Suite > Images > Example 574
(fail) CommonMark Spec Test Suite > Images > Example 575
(fail) CommonMark Spec Test Suite > Images > Example 576
(fail) CommonMark Spec Test Suite > Images > Example 577
(fail) CommonMark Spec Test Suite > Images > Example 578
(fail) CommonMark Spec Test Suite > Images > Example 579
(fail) CommonMark Spec Test Suite > Images > Example 580
(fail) CommonMark Spec Test Suite > Images > Example 581
(fail) CommonMark Spec Test Suite > Images > Example 582
(fail) CommonMark Spec Test Suite > Images > Example 583
(fail) CommonMark Spec Test Suite > Images > Example 584
(fail) CommonMark Spec Test Suite > Images > Example 585
(fail) CommonMark Spec Test Suite > Images > Example 586
(fail) CommonMark Spec Test Suite > Images > Example 587
(fail) CommonMark Spec Test Suite > Images > Example 588
(fail) CommonMark Spec Test Suite > Images > Example 589
(fail) CommonMark Spec Test Suite > Images > Example 591
(fail) CommonMark Spec Test Suite > Images > Example 592
(fail) CommonMark Spec Test Suite > Images > Example 593
(fail) CommonMark Spec Test Suite > Autolinks > Example 594
(fail) CommonMark Spec Test Suite > Autolinks > Example 595
(fail) CommonMark Spec Test Suite > Autolinks > Example 596
(fail) CommonMark Spec Test Suite > Autolinks > Example 597
(fail) CommonMark Spec Test Suite > Autolinks > Example 598
(fail) CommonMark Spec Test Suite > Autolinks > Example 599
(fail) CommonMark Spec Test Suite > Autolinks > Example 600
(fail) CommonMark Spec Test Suite > Autolinks > Example 601
(fail) CommonMark Spec Test Suite > Autolinks > Example 602
(fail) CommonMark Spec Test Suite > Autolinks > Example 603
(fail) CommonMark Spec Test Suite > Autolinks > Example 604
(fail) CommonMark Spec Test Suite > Autolinks > Example 605
(fail) CommonMark Spec Test Suite > Autolinks > Example 606
(fail) CommonMark Spec Test Suite > Autolinks > Example 607
(fail) CommonMark Spec Test Suite > Autolinks > Example 608
(fail) CommonMark Spec Test Suite > Autolinks > Example 609
(fail) CommonMark Spec Test Suite > Autolinks > Example 610
(fail) CommonMark Spec Test Suite > Raw HTML > Example 613
(fail) CommonMark Spec Test Suite > Raw HTML > Example 614
(fail) CommonMark Spec Test Suite > Raw HTML > Example 615 [1.95ms]
(fail) CommonMark Spec Test Suite > Raw HTML > Example 616
(fail) CommonMark Spec Test Suite > Raw HTML > Example 618
(fail) CommonMark Spec Test Suite > Raw HTML > Example 619
(fail) CommonMark Spec Test Suite > Raw HTML > Example 620
(fail) CommonMark Spec Test Suite > Raw HTML > Example 621
(fail) CommonMark Spec Test Suite > Raw HTML > Example 622
(fail) CommonMark Spec Test Suite > Raw HTML > Example 623
(fail) CommonMark Spec Test Suite > Raw HTML > Example 624
(fail) CommonMark Spec Test Suite > Raw HTML > Example 629 [0.29ms]
(fail) CommonMark Spec Test Suite > Raw HTML > Example 632 [0.03ms]
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 633
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 634
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 635
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 636
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 637
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 638
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 639
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 640
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 641
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 642
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 643 [0.28ms]
(fail) CommonMark Spec Test Suite > Hard line breaks > Example 645 [0.02ms]
(fail) editor-reference-file tests > Should parse a bullet list from the reference file [0.38ms]
(fail) editor-reference-file tests > Should parse code blocks from the reference file
(fail) editor-reference-file tests > Should parse inline links properly
(fail) editor-reference-file tests > Should parse the entire editor-reference-file.md without errors [1.07ms]
-------------------------------------|---------|---------|-------------------
File                                 | % Funcs | % Lines | Uncovered Line #s
-------------------------------------|---------|---------|-------------------
All files                            |   87.90 |   82.69 |
 editor.ts                           |   72.00 |   81.76 | 40,56,59,97,100,107,109-115,126-127,131,134,151-159,161-163,177,218-243,245-249
 happydom.ts                         |  100.00 |  100.00 | 
 index.ts                            |   67.50 |   41.36 | 26,31-48,52-57,61-128,132-153,157-239,278,337-343,347-351,361-364,376-383,387-388,392,420,428,436,441-451,474-475,490-497,507,571-583,587-594,600-604,607,613-618
 markdown-parser.ts                  |  100.00 |   90.34 | 118-119,198,200,213,239-241,249-251,308-324
 md-parser-test-suits/test-config.ts |  100.00 |  100.00 | 
-------------------------------------|---------|---------|-------------------

 241 pass
 538 fail
 846 expect() calls
Ran 779 tests across 6 files. [324.00ms]
Error: Command failed: /Users/brandon/.bun/install/global/node_modules/@oven/bun-darwin-aarch64/bin/bun test --
    at genericNodeError (node:internal/errors:984:15)
    at wrappedFn (node:internal/errors:538:14)
    at checkExecSyncError (node:child_process:891:11)
    at execFileSync (node:child_process:927:15)
    at /Users/brandon/.bun/install/global/node_modules/bun/bin/bun:405:66 {
  status: 1,
  signal: null,
  output: [ null, null, null ],
  pid: 24422,
  stdout: null,
  stderr: null
}
